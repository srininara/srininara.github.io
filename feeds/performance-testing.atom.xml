<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Starting Point - Performance Testing</title><link href="https://www.nacnez.com/" rel="alternate"></link><link href="https://www.nacnez.com/feeds/performance-testing.atom.xml" rel="self"></link><id>https://www.nacnez.com/</id><updated>2023-10-22T00:00:00+05:30</updated><entry><title>Locust statistics in AWS Cloudwatch</title><link href="https://www.nacnez.com/locust-cw-plugin.html" rel="alternate"></link><published>2023-10-22T00:00:00+05:30</published><updated>2023-10-22T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2023-10-22:/locust-cw-plugin.html</id><summary type="html">&lt;p&gt;A plugin to push locust test metrics to AWS CloudWatch - open sourced.&lt;/p&gt;</summary><content type="html">&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;TL;DR&lt;p&gt;Developing &amp;amp; open sourcing a locust plugin that pushes performance test metrics to AWS CloudWatch using locust event hooks and boto3 client.&lt;/p&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I developed a simple locust plugin and open sourced it. Your questions answered:&lt;/p&gt;
&lt;h2 id="what-are-you-talking-about"&gt;&lt;span class="bold-calm"&gt;What are you talking about?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Let me give you some context. I needed a performance test setup for one of our important services in &lt;a href="https://getsimpl.com/"&gt;&lt;img src="https://www.google.com/s2/favicons?domain=https://getsimpl.com"/&gt;Simpl&lt;/a&gt;. My tool of choice for load generation was &lt;a href="https://locust.io/"&gt;Locust&lt;/a&gt;. I had my reasons and I will discuss that in a different post.&lt;/p&gt;
&lt;h2 id="ok-so-what-why-a-plugin"&gt;&lt;span class="bold-calm"&gt;Ok, so what? Why a plugin?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Locust is a great load generation tool. It has been around for a long time, has a good community, fairly performant and supports a lot of features for load generation. But, there was still one problem that needed to be solved for our case - &lt;span class="real-bold-green"&gt;performance test reporting the way we wanted it&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Locust does allow us to generate reports from the UI, but that approach did not work for us since we were running it in headless mode (part of the CI setup). I also wanted the reports to live for much longer than the duration of test runs since it helps in comparitive analysis. So I decided that we need to send the metric information elsewhere to store and track them. &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/working_with_metrics.html"&gt;AWS Cloudwatch metrics&lt;/a&gt; was a good solution for Simpl's setup - a lot of our metrics go there. &lt;/p&gt;
&lt;p&gt;To make this happen, we needed some software which will take the metrics measured by locust and send it to AWS Cloudwatch. The idea is not a new one. If we look at &lt;a href="https://github.com/SvenskaSpel/locust-plugins/tree/master/locust_plugins/listeners"&gt;listeners in the locust plugins repo&lt;/a&gt;, we can see solutions for this for other metrics collection systems. Timescale is one such example. I decided that a &lt;code&gt;cloudwatch&lt;/code&gt; listener plugin is the way to go.&lt;/p&gt;
&lt;h2 id="what-does-this-plugin-do"&gt;&lt;span class="bold-calm"&gt;What does this plugin do?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The plugin is simple. It hooks into the events generated by locust, gathers the data from the event hooks, converts them into metrics and uses a client (&lt;a href="https://github.com/boto/boto3"&gt;boto3&lt;/a&gt;) to push it into Cloudwatch. &lt;/p&gt;
&lt;h3 id="give-me-more-details-buddy"&gt;&lt;span class="bold-calm"&gt;Give me more details buddy...&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Locust provides a set of &lt;a href="https://docs.locust.io/en/stable/extending-locust.html"&gt;event hooks&lt;/a&gt;, which can be used to track various actions &amp;amp; events of locust. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cloudwatch&lt;/code&gt; plugin works primarily using 2 event hooks (it actually uses 4, but 2 are important):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When locust initialises, it calls the &lt;code&gt;init&lt;/code&gt; event hook. Our plugin is bootstrapped as part of the event hook. The user of the plugin does this step. Checkout an example for &lt;span class="italic-green"&gt;Application Insights&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FSvenskaSpel%2Flocust-plugins%2Fblob%2F7e46f18330d8d0e8f3bba654371fa1d75ad90ffb%2Fexamples%2Fappinsights_listener_ex.py%23L14-L16&amp;amp;style=atom-one-dark-reasonable&amp;amp;type=code&amp;amp;showBorder=on&amp;amp;showLineNumbers=on&amp;amp;showFileMeta=on&amp;amp;showFullPath=on&amp;amp;showCopy=on"&gt;&lt;/script&gt;
&lt;p&gt;The cloudwatch plugin also does it in similar manner:&lt;/p&gt;
&lt;script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FSvenskaSpel%2Flocust-plugins%2Fblob%2F7e46f18330d8d0e8f3bba654371fa1d75ad90ffb%2Fexamples%2Fcloudwatch_listener_ex.py%23L5-L7&amp;amp;style=atom-one-dark-reasonable&amp;amp;type=code&amp;amp;showBorder=on&amp;amp;showLineNumbers=on&amp;amp;showFileMeta=on&amp;amp;showFullPath=on&amp;amp;showCopy=on"&gt;&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;When each request is completed (successful or unsuccessful), the &lt;code&gt;request&lt;/code&gt; event hook is called. All the data related to the request like request type, URL of the request, response time etc. are passed as parameters to this call. This is the primary source of data for creating and publishing metrics of a performance test. The plugin registers this event hook when it is instantiated as part of bootstrapping. &lt;span class="italic-green"&gt;Application Insights&lt;/span&gt; example here - &lt;span class="bold-green"&gt;focus on line 26 (last line)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FSvenskaSpel%2Flocust-plugins%2Fblob%2F7e46f18330d8d0e8f3bba654371fa1d75ad90ffb%2Flocust_plugins%2Flisteners%2Fappinsights.py%23L12-26&amp;amp;style=atom-one-dark-reasonable&amp;amp;type=code&amp;amp;showBorder=on&amp;amp;showLineNumbers=on&amp;amp;showFileMeta=on&amp;amp;showFullPath=on&amp;amp;showCopy=on"&gt;&lt;/script&gt;
&lt;p&gt;The cloudwatch plugin does it this way (&lt;span class="bold-green"&gt;line 168&lt;/span&gt;):&lt;/p&gt;
&lt;script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FSvenskaSpel%2Flocust-plugins%2Fblob%2F7e46f18330d8d0e8f3bba654371fa1d75ad90ffb%2Flocust_plugins%2Flisteners%2Fcloudwatch.py%23L145-L169&amp;amp;style=atom-one-dark-reasonable&amp;amp;type=code&amp;amp;showBorder=on&amp;amp;showLineNumbers=on&amp;amp;showFileMeta=on&amp;amp;showFullPath=on&amp;amp;showCopy=on"&gt;&lt;/script&gt;
&lt;p&gt;Now the data is all available, so all the plugin has to do is to push it to Cloudwatch. Sounds easy right. It is easy, but the plugin does a little trick:&lt;/p&gt;
&lt;p&gt;Instead of just passing the metrics to Cloudwatch at the end of each request, the plugin batches them. Why? Because posting metrics to Cloudwatch costs money at request level. So, instead, it is better to batch them &amp;amp; send it. Cost reduction is always a good idea!&lt;span class="emoji"&gt;ðŸ˜„ðŸ¤©&lt;/span&gt; Also, this approach optimises the time spent in publishing these metrics. &lt;/p&gt;
&lt;p&gt;The request data is encapsulated into an object &lt;code&gt;RequestResult&lt;/code&gt; which provides methods to convert locust raw data to meaningful Cloudwatch metrics.&lt;/p&gt;
&lt;script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FSvenskaSpel%2Flocust-plugins%2Fblob%2F7e46f18330d8d0e8f3bba654371fa1d75ad90ffb%2Flocust_plugins%2Flisteners%2Fcloudwatch.py%23L13-L29&amp;amp;style=atom-one-dark-reasonable&amp;amp;type=code&amp;amp;showBorder=on&amp;amp;showLineNumbers=on&amp;amp;showFileMeta=on&amp;amp;showFullPath=on&amp;amp;showCopy=on"&gt;&lt;/script&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt;Dig more using view raw.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This object is stored in &lt;code&gt;gevent.queue.Queue&lt;/code&gt; - &lt;span class="bold-green"&gt;line 200&lt;/span&gt;. &lt;/p&gt;
&lt;script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FSvenskaSpel%2Flocust-plugins%2Fblob%2F7e46f18330d8d0e8f3bba654371fa1d75ad90ffb%2Flocust_plugins%2Flisteners%2Fcloudwatch.py%23L183-205&amp;amp;style=atom-one-dark-reasonable&amp;amp;type=code&amp;amp;showBorder=on&amp;amp;showLineNumbers=on&amp;amp;showFileMeta=on&amp;amp;showFullPath=on&amp;amp;showCopy=on"&gt;&lt;/script&gt;
&lt;p&gt;Once a batch of requests has been queued in, the plugin will create metrics out of them and send them to cloudwatch in batches &lt;span class="bold-green"&gt;(lines 203-204)&lt;/span&gt;. Two constants govern the limits of this behaviour.&lt;/p&gt;
&lt;script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2FSvenskaSpel%2Flocust-plugins%2Fblob%2F7e46f18330d8d0e8f3bba654371fa1d75ad90ffb%2Flocust_plugins%2Flisteners%2Fcloudwatch.py%23L153-154&amp;amp;style=atom-one-dark-reasonable&amp;amp;type=code&amp;amp;showBorder=on&amp;amp;showLineNumbers=on&amp;amp;showFileMeta=on&amp;amp;showFullPath=on&amp;amp;showCopy=on"&gt;&lt;/script&gt;
&lt;p&gt;The first one focuses on the limit of actual requests batched. The second one is focused on batch size of metrics sent to Cloudwatch - (one request can lead to more than one metric record - request count, response time, failure count etc.).&lt;/p&gt;
&lt;p&gt;That is it! If you want to look at the code in full, check it &lt;a href="https://github.com/SvenskaSpel/locust-plugins/blob/master/locust_plugins/listeners/cloudwatch.py"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="where-does-the-plugin-run-now"&gt;&lt;span class="bold-calm"&gt;Where does the plugin run now?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The plugin (a version of it) has been running in &lt;a href="https://getsimpl.com/"&gt;&lt;img src="https://www.google.com/s2/favicons?domain=https://getsimpl.com"/&gt;Simpl&lt;/a&gt; perf environments for one of the services for more than a year. More teams/services within Simpl are adopting it now.&lt;/p&gt;
&lt;p&gt;The version which is running inside Simpl has some support for configuring AWS Cloudwatch response time alarms as well. But we have not open sourced that yet (hopefully can do it soon).&lt;/p&gt;
&lt;h2 id="where-is-the-code-now"&gt;&lt;span class="bold-calm"&gt;Where is the code now?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/SvenskaSpel/locust-plugins/pull/147"&gt;pull request&lt;/a&gt; was submitted to the &lt;a href="https://github.com/SvenskaSpel/locust-plugins"&gt;main github repo&lt;/a&gt;, and it got approved and merged into the master branch. It was released on 18th Oct as part of &lt;a href="https://github.com/SvenskaSpel/locust-plugins/releases/tag/4.1.0"&gt;Release 4.1.0&lt;/a&gt;. You can track all releases &lt;a href="https://github.com/SvenskaSpel/locust-plugins/releases"&gt;here&lt;/a&gt;. The locust plugin repo has other useful plugins as well. So you should check it out fully.&lt;/p&gt;
&lt;h2 id="how-did-the-process-of-open-source-contribution-go"&gt;&lt;span class="bold-calm"&gt;How did the process of open source contribution go?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I had thought of contributing this plugin sometime back in January 2023. I raised a &lt;a href="https://github.com/SvenskaSpel/locust-plugins/issues/111"&gt;Github issue&lt;/a&gt; and discussed with my CTO &lt;a href="https://www.linkedin.com/in/puneetsingh80/"&gt;Puneet Singh&lt;/a&gt; to get his approval- He was all for it. But before taking the next step, life got in the way and I dropped the ball; the issue got closed.&lt;/p&gt;
&lt;p&gt;I picked it back up in the last couple of weeks and actively started the contribution process. &lt;a href="https://github.com/cyberw"&gt;Lars Holmberg&lt;/a&gt;, the maintainer of the plugins repo and the main &lt;a href="https://github.com/locustio/locust"&gt;locust repo&lt;/a&gt; helped me through the entire process.&lt;/p&gt;
&lt;p&gt;We had very useful and timely interactions on the locust Slack channel. Apart from the plugin code, I created an example usage file (referred above) as well as a basic test for the plugin. Lars suggested and helped me with creating these. He also helped me improve the code of the plugin to make it easier to understand and to conform to the policies followed by the locust development process. And in quick time, the plugin code got accepted. It was a swift, constructive and satisfying process.&lt;/p&gt;
&lt;p&gt;I have not made too many open source contributions till date, but this experience makes me want to do a lot more of it. Thanks &lt;a href="https://twitter.com/cyberw"&gt;Lars Holmberg&lt;/a&gt; for helping with this.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;span class="bold-calm"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This is my first significant open source contribution. I know it is very late in the game, but it better late than never. This experience has made me believe that this process is a worthwhile one. 
My journey has only started, and I hope to do more. Also, hopefully this post will encourage you to do more of this and not wait for long like me. Wish you a happy time doing open source!&lt;/p&gt;</content><category term="open source"></category><category term="performance testing"></category><category term="AWS"></category><category term="locust"></category><category term="plugin"></category><category term="software-engineering"></category><category term="development"></category><category term="community"></category></entry></feed>