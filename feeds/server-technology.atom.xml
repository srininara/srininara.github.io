<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Starting Point - Server Technology</title><link href="http://www.nacnez.com/" rel="alternate"></link><link href="http://www.nacnez.com/feeds/server-technology.atom.xml" rel="self"></link><id>http://www.nacnez.com/</id><updated>2018-03-31T00:00:00+05:30</updated><entry><title>Nginx Serves Us like this - Maybe</title><link href="http://www.nacnez.com/nginx-working-deepdive.html" rel="alternate"></link><published>2018-03-31T00:00:00+05:30</published><updated>2018-03-31T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2018-03-31:/nginx-working-deepdive.html</id><summary type="html">&lt;p&gt;A slightly deep dive on how nginx starts up and serves client requests.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nginx is one of the projects which I always felt a pull towards, owing to it architecture. It is "event driven"!. For some time, I have heard this but I always wanted to get more deeper into it. So I did some digging on how nginx works. I read many articles (will be referred below) and pieced it together to the best of my understanding. Here is my attempt to explain how I think it works!&lt;/p&gt;
&lt;p&gt;Of course take this with generous helping of salt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don't have much knowledge on linux internals and syscalls - so whatever I describe is surely going to have faults/mistakes. I look forward to get help from others to correct it.&lt;/li&gt;
&lt;li&gt;Another reason is that I did not go through the nginx source code. I don't have expertise in C and I am too scared to peep into nginx codebase for the fear of getting completely lost.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that is out of the way let us get started.&lt;/p&gt;
&lt;h2&gt;Background - Process Roles&lt;/h2&gt;
&lt;p&gt;&lt;img alt="The Nginx Master and Workers" src="http://www.nacnez.com/images/nginx-art01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Okay. Before we get started let us get some background on the nginx processes.&lt;/p&gt;
&lt;p&gt;Nginx follows an event driven architecture and has different types of processes doing specific kinds of tasks. Let me first describe these process type and their roles. Once that is out of the way, I can get to more details on how the nginx startup and processes requests.&lt;/p&gt;
&lt;p&gt;The four different kinds of processes are:&lt;/p&gt;
&lt;h4&gt;Master&lt;/h4&gt;
&lt;p&gt;The master process is what starts up and manages the lifecycle of all nginx processes. &lt;/p&gt;
&lt;h4&gt;Worker&lt;/h4&gt;
&lt;p&gt;This is the work horse of nginx. This process is the one which does all processing for client requests. Reverse proxying, load balancing, compression, ssl termination etc. are all done by this process. Generally there could more than one of these processes running at any given time.&lt;/p&gt;
&lt;h4&gt;Cache related processes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cache loader process
This process checks the on-disk cache items and populates nginx in-memory db with cache metadata. It prepares nginx to work with files already cached and exits after updating in-memory db&lt;/li&gt;
&lt;li&gt;Cache manager process
This process manages cache expiration and invalidation. It stays in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That should be enough background. Let us deep dive into how nginx starts and processes requests. For this discussion the processes under focus are only the master and the worker processes.&lt;/p&gt;
&lt;h2&gt;Nginx startup&lt;/h2&gt;
&lt;p&gt;You start nginx by calling &lt;code&gt;nginx&lt;/code&gt;. Let us look at what each of the main processes do at this point&lt;/p&gt;
&lt;h3&gt;The Master (A true leader/delegator)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Syscalls made by master at startup" src="http://www.nacnez.com/images/nginx-MasterAtStart.png"&gt;&lt;/p&gt;
&lt;p&gt;The first process to start is the master process. It first reads through, validates and compiles the configuration. Once the configuration is validated and compiled, it looks at the configuration to figure out what all listen sockets have to be created for serving client requests.&lt;/p&gt;
&lt;p&gt;The server connection establishment process starts at this point for the required listen sockets. As a server (role played in client server communication), the master first tries to create sockets and bind to the ports defined in the configuration. One thing to note is that if the defined ports belong to the reserved set, the nginx needs to be started as a privileged user (root/sudo). Once the socket is created and binded it will also set the socket to listen mode with a default backlog of 511 (read more about listen backlog from references).&lt;/p&gt;
&lt;p&gt;The next step the nginx master does is to start the worker processes. This is typically done by forking (&lt;code&gt;clone&lt;/code&gt;) them out as a child process (this is my assumption/understanding). This also means that listen sockets descriptors are copied over to the child processes and are hence accessible to the workers. The compiled configuration is also passed onto the them. The number of worker processes to be created is based on configuration. The typical default is &lt;code&gt;auto&lt;/code&gt; which leads to the creation as many workers as there are cores in the machine (or VM).&lt;/p&gt;
&lt;h3&gt;The Worker (I am awake!)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Syscalls made by worker at startup" src="http://www.nacnez.com/images/nginx-WorkerAtStart.png"&gt;&lt;/p&gt;
&lt;p&gt;Each worker creates a epoll data structure with the kernel (using &lt;code&gt;epoll_create&lt;/code&gt;). It then registers the listen socket descriptor to it using &lt;code&gt;epoll_ctl&lt;/code&gt; and asks the kernel to let it know if there are any events (read or write) on the listen socket(s). All the different workers have access to the listen socket and they concurrently share the requests coming to them. Eventually if the worker has no other work to do it would block using &lt;code&gt;epoll_wait&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each of the workers also create non-blocking connection sockets to upstream servers so that they can act as proxies to them. This also is event based and hence based on epoll.&lt;/p&gt;
&lt;h2&gt;Nginx processing requests&lt;/h2&gt;
&lt;p&gt;Now that nginx has started, it is time to process requests.&lt;/p&gt;
&lt;h3&gt;The Master (time to sleep)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Syscalls made by master on getting load/user requests" src="http://www.nacnez.com/images/nginx-MasterOnLoad.png"&gt;&lt;/p&gt;
&lt;p&gt;At this point the master pretty much does nothing. It does not have any work to do during the time of processing requests.&lt;/p&gt;
&lt;h3&gt;The Worker (A superstar)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Syscalls made by worker on load" src="http://www.nacnez.com/images/nginx-WorkerOnLoad.png"&gt;&lt;/p&gt;
&lt;p&gt;When a new client connection request comes to the listen socket, the linux kernel will pick the latest added worker process among epoll those waiting in the listen queue and send an event.&lt;/p&gt;
&lt;p&gt;This worker process would then do a non-blocking &lt;code&gt;accept&lt;/code&gt; call which will create a connection socket between the client and server. This connection is now going to be served by this worker process. The worker does the same thing with the connection socket as it did with the listen socket. It registers interest on IO events happening on that socket through epoll_ctl and waits for events with &lt;code&gt;epoll_wait&lt;/code&gt; if it has no other work to do.&lt;/p&gt;
&lt;p&gt;Over a period of time you will find that a worker process ends up serving many connections at the same time. Each of these connections are registered with their own epoll data structure. At the end of epoll_wait, the worker might get multiple sockets which are ready for processing. It then processes each of those requests. Processing of incoming request might include acting as a reverse proxy (write out the request to upstream server), do ssl termination etc. On the other hand processing of the response could be compressing the response read from the up stream server (again this is event based using epoll), and write out the response to the client again in non-blocking fashion. The worker is the one which exhibits all the wonderful features of nginx.&lt;/p&gt;
&lt;p&gt;The worker processes do not use epoll based asynchronous IO for files. For files it does blocking IO in most cases. If AIO is well supported in a platform it might use the same. But generally file IO slowness can lead to blocking behavior in the worker (and hence nginx).&lt;/p&gt;
&lt;h2&gt;What is all this fuss about!&lt;/h2&gt;
&lt;p&gt;Nginx does all this to provide high scalability.&lt;/p&gt;
&lt;h3&gt;The worker's power&lt;/h3&gt;
&lt;p&gt;A nginx worker can process 1000s of connections at the same time because of its non-blocking event based nature. Because of this nature, the cost per new connection in nginx is a matter of space for a new file descriptor and data structures needed to manage that socket's information. This is unlike other servers which have a process driven architecture (apache) which needs to allocate much more memory due to creation of process (stack and heap).&lt;/p&gt;
&lt;p&gt;Also the creation of limited number of worker processes in nginx means they can remain pinned to the cpu cores and avoid excessive context switching.&lt;/p&gt;
&lt;h3&gt;But then it is not all roses&lt;/h3&gt;
&lt;p&gt;Earlier I mentioned that the linux kernel keeps picking up the latest added process to distribute connection requests coming into the listen sockets, it happens that one of the workers get the lion share of the work load and hence the multi-core usage becomes skewed - more on one process. You will find more information in one of the articles in the references section.&lt;/p&gt;
&lt;h3&gt;The master strikes back.&lt;/h3&gt;
&lt;p&gt;From the above it looks like the &lt;em&gt;worker&lt;/em&gt; is the only star and master is just sleeping. But the sleeping giant plays an important role in keeping nginx running when reloading configuration changes or even doing a nginx binary upgrade. You can find out more about this in the articles in references.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As I said earlier, what I have tried here is to give an overview of how nginx goes about serving its clients at a slightly more detail level. I have used the following references as a way to understand most of this. And of course I might have got some of the connecting pieces wrong. If anybody can find these gaps please chime in. Thanks for being here!&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/"&gt;Inside NGINX: How We Designed for Performance &amp;amp; Scale&lt;/a&gt; - Gives a good idea on Nginx architecture. Also covers how the master is able to handle config changes or binary upgrades without downtime.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netguru.co/codestories/nginx-tutorial-basics-concepts"&gt;Nginx Tutorial #1: Basic Concepts&lt;/a&gt; - Just basic idea on running nginx and some basic configuration&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.aosabook.org/en/nginx.html"&gt;nginx&lt;/a&gt; - A deep dive on nginx architecture by one of nginx architects&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/blog/tuning-nginx/"&gt;Tuning NGINX for Performance&lt;/a&gt; - Gives you ideas for improving nginx performance&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/developerworks/aix/library/au-tcpsystemcalls/index.html"&gt;Know your TCP system call sequences&lt;/a&gt; - A general article covering system calls related to TCP connection creation and management. Covers listen backlog too.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/"&gt;Why does one NGINX worker take all the load?&lt;/a&gt; - This article talks about how it happens that one nginx worker ends up getting a lot more load than others and what you can potentially do about it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@copyconstruct/the-method-to-epolls-madness-d9d2d6378642"&gt;The method to epoll’s madness&lt;/a&gt; - A good article on how epoll works.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.nginx.org/read.php?2,194884,194884"&gt;Does Nginx block on file IO?&lt;/a&gt; - A discussion thread on how nginx file reading works.&lt;/li&gt;
&lt;/ol&gt;</content><category term="web server"></category><category term="reverse proxy"></category><category term="load balancer"></category><category term="system calls"></category><category term="processes"></category><category term="nginx"></category><category term="architecture"></category></entry></feed>