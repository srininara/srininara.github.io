<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Starting Point - Software Training</title><link href="https://www.nacnez.com/" rel="alternate"></link><link href="https://www.nacnez.com/feeds/software-training.atom.xml" rel="self"></link><id>https://www.nacnez.com/</id><updated>2023-08-10T00:00:00+05:30</updated><entry><title>Pykidz!: My Python Course</title><link href="https://www.nacnez.com/pykidz-basic-course.html" rel="alternate"></link><published>2023-08-10T00:00:00+05:30</published><updated>2023-08-10T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2023-08-10:/pykidz-basic-course.html</id><summary type="html">&lt;p&gt;Basic python course I shared in YouTube&lt;/p&gt;</summary><content type="html">&lt;p&gt;Programming is already a very important skill in today's world. It is not a stretch to say that it is an essential skill. Professionals from all areas want to learn a bit of programming to get an edge. Kids are excited about learning programming and schools are encouraging them by either having it in their course curriculum or as a differentiating aspect of their training. And learning programming using the &lt;strong&gt;&lt;span class="bold-green"&gt;Python&lt;/span&gt;&lt;/strong&gt; language has been all the rage for some time now.&lt;/p&gt;
&lt;p&gt;I have had this thought for some time. So, sometime back, I created a video course (in YouTube) on Python fundamentals, which is aimed at kids. The intention of the course was to give the learner (who has no programming experience), the fundamentals of Python and a basic sense of programming. This post describes the details of what I covered in these video sessions.&lt;/p&gt;
&lt;h2 id="pykidz-course-curriculum"&gt;&lt;span class="bold-calm"&gt;Pykidz Course Curriculum&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The course focuses on the following areas:&lt;/p&gt;
&lt;h3 id="1-introduction-to-python"&gt;&lt;span class="bold-calm"&gt;1. Introduction to Python&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;As the name goes, this is an introduction. It starts talking about why one should learn programming, and why learn python. &lt;/p&gt;
&lt;p&gt;Then, I provide a brief idea on how you can install python in your machine. I also talk a bit about python versions. Then I get hands-on and demonstrate the usage of the Python shell.&lt;/p&gt;
&lt;p&gt;This video also covers how we can do calculations (on the shell). You get an understanding of the operators in python. The most important concept covered in this session is variables. &lt;/p&gt;
&lt;p&gt;All of this is covered in a single video! At the end, &lt;span class="bold-angry"&gt;you&lt;/span&gt; will know why programming and python and how to get started.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First (and only) Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/39H5gtdKrbY" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-1-introduction/session-1-notes.md"&gt;Pykidz Sessions - Session 1 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-1-introduction/session-1-slides.pdf"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="2-basic-data-types"&gt;&lt;span class="bold-calm"&gt;2. Basic Data Types&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The second session / video covers all the basic data types supported by Python. This includes numeric types (integers - &lt;code&gt;int&lt;/code&gt; and floating point numbers - &lt;code&gt;float&lt;/code&gt;), &lt;code&gt;string&lt;/code&gt;s and &lt;code&gt;boolean&lt;/code&gt;s. I demonstrate operations on these different data types to provide a deeper understanding on them (special focus on strings). At the end of the session, &lt;span class="bold-angry"&gt;you&lt;/span&gt; will know the various kinds of data that you can work with in Python.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First (and only) Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/2RUWltA8w5M" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-2-basic_data_types/session-2-notes.md"&gt;Pykidz Sessions - Session 2 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-2-basic_data_types/session-2-slides.pdf"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="3-fully-hands-on-a-get-your-hands-dirty-session"&gt;&lt;span class="bold-calm"&gt;3. Fully Hands on: A Get your hands dirty session!&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;After a couple of sessions that were a little heavy on theory &amp;amp; concepts, I made this session (consisting of 4 videos!) to help learners get their hands dirty with working code. The intention of this session is to get &lt;span class="bold-angry"&gt;you&lt;/span&gt; to write a couple of simple working programs. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first video is about taking user input interactively in the program. This is useful for writing &lt;em&gt;&lt;span class="bold-green"&gt;dynamic&lt;/span&gt;&lt;/em&gt; programs - they can do things based on what users want. &lt;/li&gt;
&lt;li&gt;The next video is about getting &lt;span class="bold-angry"&gt;you&lt;/span&gt; to know, how you can write code in source files instead of just working with Python shell. The python shell or &lt;span class="bold-green"&gt;REPL&lt;/span&gt; is great for trying things out quickly and learning stuff, but if we want to write programs that we want to keep around and run multiple times, then using source files are the way to go.&lt;/li&gt;
&lt;li&gt;The third video is about using &lt;code&gt;import&lt;/code&gt;s - a way for &lt;span class="bold-angry"&gt;you&lt;/span&gt; use code others have written. I demonstrate this by importing functions from the standard library. This is a key learning.&lt;/li&gt;
&lt;li&gt;After discussing these learnings, I &lt;span class="bold-calm"&gt;build the two programs&lt;/span&gt; which I initially talked about. &lt;span class="bold-angry"&gt;You&lt;/span&gt; can attempt them yourselves before you look at the video and follow along.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/k98yOwyubDg" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="small-italicized-green"&gt;NOTE: Links for next videos of the session are present description in this YouTube video.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-3-fully_hands_on/session-3-notes.md"&gt;Pykidz Sessions - Session 3 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-3-fully_hands_on/session-3-slides.pdf"&gt;Slides&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/tree/master/sessions/session-3-fully_hands_on/code"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="4-python-lists"&gt;&lt;span class="bold-calm"&gt;4. Python Lists&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;After completing the sessions till now, &lt;span class="bold-angry"&gt;you&lt;/span&gt;, the aspiring developer, have a basic idea on python data types and have written some programs. You know how to take input from the user, and manipulate that data. &lt;span class="bold-angry"&gt;You&lt;/span&gt; have got your feet wet in the world of programming.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;this&lt;/em&gt; next set of videos, I briefly introduce the different data types that allow us to store more than one item of a given type. &lt;/p&gt;
&lt;p&gt;Let me give a couple of examples: a &lt;span class="bold-green"&gt;collection&lt;/span&gt; or &lt;span class="bold-green"&gt;list&lt;/span&gt; of fruit names or a list of subject scores etc. These session videos (4 again!) focus on a specific collection type called &lt;code&gt;lists&lt;/code&gt;. I demonstrate how &lt;span class="bold-angry"&gt;you&lt;/span&gt; can define them, access elements or items in them, &lt;em&gt;&lt;span class="bold-green"&gt;slice&lt;/span&gt;&lt;/em&gt; them, add/remove items, membership etc. Before I dive into the details of lists, I cover &lt;em&gt;&lt;span class="bold-green"&gt;comparison operators&lt;/span&gt;&lt;/em&gt; in Python (we already covered basic operators in the second session) which are very important for &lt;span class="bold-angry"&gt;you&lt;/span&gt; to know down the line.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/9O2iC1-mnSI" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="small-italicized-green"&gt;NOTE: Links for next videos of the session are present description in this YouTube video.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-4-python-lists/session-4-notes.md"&gt;Pykidz Sessions - Session 4 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-4-python-lists/session-4-slides.pdf"&gt;Slides&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id="5-other-composite-types"&gt;&lt;span class="bold-calm"&gt;5. Other Composite Types&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This session content is split into 3 videos. Each covers one of the remaining main collection data types in Python. We start with &lt;code&gt;tuples&lt;/code&gt;, which feel very close to lists but has a very &lt;em&gt;significant&lt;/em&gt; difference. The second video covers &lt;code&gt;dictionaries&lt;/code&gt; which are not just a collection of things, but a collection which is indexed by a key - hence &lt;em&gt;&lt;span class="bold-green"&gt;key value pairs&lt;/span&gt;&lt;/em&gt;. The last one covers &lt;code&gt;sets&lt;/code&gt; which is a collection of unique elements only. For each of these &lt;em&gt;&lt;span class="bold-green"&gt;composite&lt;/span&gt;&lt;/em&gt; or collection data types, I describe typical topics like definition, access, membership etc. I also cover properties &amp;amp; operations that apply to that specific type. By the end of these two sessions, &lt;span class="bold-angry"&gt;you&lt;/span&gt; will know all that is to know about working with collections of data.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/9weVQqLsRt8" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="small-italicized-green"&gt;NOTE: Links for next videos of the session are present description in this YouTube video.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-5-other-composite-types/session-5-notes.md"&gt;Pykidz Sessions - Session 5 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-5-other-composite-types/session-5-slides.pdf"&gt;Slides&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id="6-conditionals"&gt;&lt;span class="bold-calm"&gt;6. Conditionals&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Most computer programs which we use, demonstrate the ability to do different things in different situations - &lt;em&gt;&lt;span class="bold-green"&gt;decision-making&lt;/span&gt;&lt;/em&gt;. They have an ability to check things and ask for corrections. For this to work, it is important for a program to execute alternative steps depending on situations and &lt;em&gt;&lt;span class="bold-green"&gt;conditions&lt;/span&gt;&lt;/em&gt;. This is where &lt;strong&gt;&lt;span class="bold-green"&gt;conditionals&lt;/span&gt;&lt;/strong&gt; come into play. The session is split into 5 videos. These videos explain the key conditional statements like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;. But, they don't stop there. Key python concepts like &lt;code&gt;blocks&lt;/code&gt;, the &lt;code&gt;None&lt;/code&gt; keyword, the importance of &lt;em&gt;&lt;span class="bold-green"&gt;whitespace&lt;/span&gt;&lt;/em&gt; are also covered in these videos. I end this session with &lt;span class="bold-calm"&gt;a couple of problems&lt;/span&gt; for &lt;span class="bold-angry"&gt;you&lt;/span&gt; to solve. Now &lt;span class="bold-angry"&gt;you&lt;/span&gt; can make decisions within your code.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/EGKE7o6ZURg" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="small-italicized-green"&gt;NOTE: Links for next videos of the session are present description in this YouTube video.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-6-conditionals/session-6-notes.md"&gt;Pykidz Sessions - Session 6 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-6-conditionals/session-6-slides.pdf"&gt;Slides&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/tree/master/sessions/session-6-conditionals/code"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="7-loops"&gt;&lt;span class="bold-calm"&gt;7. Loops&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;We started on the path of controlling flow when we learned conditionals. Another great power of a computer is to be able to repeat a set of tasks as many times as &lt;span class="bold-angry"&gt;you&lt;/span&gt; need without committing any errors. We humans get bored with repetition, so it is a good thing that computers don't. I am sure &lt;span class="bold-angry"&gt;you&lt;/span&gt; will appreciate this!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="bold-green"&gt;Loops&lt;/span&gt;&lt;/strong&gt; in python allow us to do that. A more technical term for looping is iteration. In these set of 15 videos (phew!), I start with explaining the term iteration and then get into its details. After that, &lt;span class="bold-angry"&gt;you&lt;/span&gt; will the basics of &lt;code&gt;while&lt;/code&gt; loops, and dive deep into the &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; statements. I then cover infinite while loops and nested while loops as well.&lt;/p&gt;
&lt;p&gt;After covering while loop in detail, I explain &lt;code&gt;for&lt;/code&gt; loops. I cover iterators, and provide specifics of how the &lt;code&gt;for&lt;/code&gt; loop works. I go through all the related topics just like I did for while loops. Finally, I close the session off by &lt;span class="bold-calm"&gt;giving a problem&lt;/span&gt; for &lt;span class="bold-angry"&gt;you&lt;/span&gt; to solve.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/BhUmH2i4nmE" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="small-italicized-green"&gt;NOTE: Links for next videos of the session are present description in this YouTube video.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-7-loops/session-7-notes.md"&gt;Pykidz Sessions - Session 7 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-7-loops/session-7-slides.pdf"&gt;Slides&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/tree/master/sessions/session-7-loops/code"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="8-modular-programming"&gt;&lt;span class="bold-calm"&gt;8. Modular Programming&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The next key concept to learn is &lt;strong&gt;&lt;span class="bold-green"&gt;modularity&lt;/span&gt;&lt;/strong&gt;. I go over functions &amp;amp; modules in python in a set of 13 videos!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="bold-green"&gt;Functions&lt;/span&gt;&lt;/strong&gt; are a fundamental concept in programming and I cover its importance in good detail. &lt;span class="bold-angry"&gt;You&lt;/span&gt; will understand the mechanics of defining &amp;amp; calling functions. I discuss passing arguments in a lot of detail and then complete this section with an explanation of the &lt;code&gt;return&lt;/code&gt; statement. Now &lt;span class="bold-angry"&gt;you&lt;/span&gt; know to write code that you can reuse again &amp;amp; again in other parts of your code.&lt;/p&gt;
&lt;p&gt;The next set of videos cover python &lt;strong&gt;&lt;span class="bold-green"&gt;modules&lt;/span&gt;&lt;/strong&gt;. It explains the concept first. It then shows how &lt;span class="bold-angry"&gt;you&lt;/span&gt; can create them and use them using &lt;code&gt;import&lt;/code&gt;s. More module details like executing it as a script, reloading it etc. are also discussed. I also have a short mention of python packages.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/Un7gKVsXq_E" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="small-italicized-green"&gt;NOTE: Links for next videos of the session are present description in this YouTube video.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-8-modular_programming/session-8-notes.md"&gt;Pykidz Sessions - Session 8 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-8-modular_programming/session-8-slides.pdf"&gt;Slides&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/tree/master/sessions/session-8-modular_programming/code"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="9-exception-handling"&gt;&lt;span class="bold-calm"&gt;9. Exception Handling&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The last session of the course is about &lt;strong&gt;&lt;span class="bold-green"&gt;Exception Handling&lt;/span&gt;&lt;/strong&gt;. I feel this is an important lesson to learn for all programming beginners. When &lt;span class="bold-angry"&gt;you&lt;/span&gt; do any kind of development, you will hit upon errors. Having an understanding of what they are and how they work is key to progress with the program. It is an essential skill &lt;span class="bold-angry"&gt;you&lt;/span&gt; need to develop as a programmer.&lt;/p&gt;
&lt;p&gt;This session consists of 6 videos. I start off discussing &lt;strong&gt;&lt;span class="bold-green"&gt;syntax errors&lt;/span&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;span class="bold-green"&gt;exceptions&lt;/span&gt;&lt;/strong&gt; - what they are and how they work in real code. I then show &lt;span class="bold-angry"&gt;you&lt;/span&gt; how to &lt;code&gt;raise&lt;/code&gt; exceptions and how the flow works when exceptions happen. After getting a runtime understanding of how exceptions work, I dive deep into the way we would be handling exception in code. I cover an important gotcha (&lt;strong&gt;crime!&lt;/strong&gt;) before closing the session with the &lt;code&gt;finally&lt;/code&gt; block &lt;span class="small-italicized-green"&gt;(pun intended!)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;First Video:&lt;/span&gt; &lt;br/&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/wJ1W4dtTEhc" title="YouTube video player" width="560"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="small-italicized-green"&gt;NOTE: Links for next videos of the session are present description in this YouTube video.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Notes &amp;amp; Slides:&lt;/span&gt; &lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-9-exception_handling/session-9-notes.md"&gt;Pykidz Sessions - Session 9 Notes&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/blob/master/sessions/session-9-exception_handling/session-9-slides.pdf"&gt;Slides&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://github.com/srininara/pykidz/tree/master/sessions/session-9-exception_handling/code"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;span class="bold-calm"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;That is the high level overview of the entire course material. If &lt;span class="bold-angry"&gt;you&lt;/span&gt; want to just get at the entire set of videos of the course, checkout this &lt;span class="bold-angry"&gt;&lt;a href="https://youtube.com/playlist?list=PLMICa_F_j-IQBifxYmlYwm5-C1bE8Eh4e"&gt;YouTube playlist&lt;/a&gt;&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;If &lt;span class="bold-angry"&gt;you&lt;/span&gt; want to get hold of all the notes, slides and source code, they are in &lt;span class="bold-angry"&gt;&lt;a href="https://github.com/srininara/pykidz"&gt;GitHub&lt;/a&gt;&lt;/span&gt;. You can also download it &lt;span class="bold-angry"&gt;&lt;a href="https://github.com/srininara/pykidz/archive/refs/heads/master.zip"&gt;here&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="my-ulterior-motives"&gt;&lt;span class="bold-calm"&gt; My ulterior motives&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The initial reason for starting the video course was that it could be useful to my daughter and for other kids like her. These videos have been out there for some time, but I don't think they have reached many people. So I decided that I will write about it here (&lt;span class="small-italicized-green"&gt;I have a small audience here, You&lt;/span&gt;), so that people who visit my blog (you) can take advantage of the course if they need it.&lt;/p&gt;
&lt;p&gt;There is another reason for doing this. This is my first attempt at creating a video based course (learned a bit of video editing - it is hard work!). I am sure that there is a lot of scope for improvement. I want to get more feedback from &lt;span class="bold-angry"&gt;you&lt;/span&gt; on this attempt. &lt;/p&gt;
&lt;p&gt;My daughter has already given one key feedback - my individual videos are too &lt;span class="bold-angry"&gt;long&lt;/span&gt;! I tried to change that in the later sessions, but did not always succeed. There could be a lot more feedback, and I would be very grateful for &lt;span class="bold-angry"&gt;your&lt;/span&gt; help. I hope to make a better version of the course soon. And God willing, I will attempt to make other courses in the future.&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt;Aum sarvam SriKrishnarpanam astu&lt;/span&gt;&lt;/p&gt;</content><category term="development"></category><category term="programming languages"></category><category term="python"></category><category term="training"></category><category term="kids"></category><category term="learning"></category></entry></feed>