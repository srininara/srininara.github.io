<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Starting Point</title><link href="https://www.nacnez.com/" rel="alternate"></link><link href="https://www.nacnez.com/feeds/all.atom.xml" rel="self"></link><id>https://www.nacnez.com/</id><updated>2022-04-12T00:00:00+05:30</updated><entry><title>Increasing Scope</title><link href="https://www.nacnez.com/blog-direction.html" rel="alternate"></link><published>2022-04-12T00:00:00+05:30</published><updated>2022-04-12T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2022-04-12:/blog-direction.html</id><summary type="html">&lt;p&gt;Adding other life aspects to this blog - increasing scope&lt;/p&gt;</summary><content type="html">&lt;p&gt;A warm welcome to you! I am back from my long hiatus and I want to share a change of plan for this blog.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Picture - Life is more and hence the blog will be about more things" src="https://www.nacnez.com/images/blog-dir-change-life.jpg" style="width: 1280px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Till date, this blog held my thoughts and my accounts on experiments I tried with on technology &amp;amp; software developement. And that was good. But I realise that as a software engineer and a person, it is not the only kind of thing I do. Please don't think that the realization came to me only now! I just did not have the guts to act on it i.e. sharing more.&lt;/p&gt;
&lt;h2&gt;Life is more&lt;/h2&gt;
&lt;p&gt;Life is about a lot of things. I am a &lt;em&gt;human&lt;/em&gt; in the profession of &lt;em&gt;software engineering&lt;/em&gt; that I practice in &lt;em&gt;India&lt;/em&gt;. I am part of a &lt;em&gt;family&lt;/em&gt;. I have &lt;em&gt;friends&lt;/em&gt; and I work in &lt;em&gt;teams&lt;/em&gt;. I am also figuring out the &lt;em&gt;bigger questions of life&lt;/em&gt;. I have some &lt;em&gt;hobbies&lt;/em&gt; too. I have &lt;em&gt;struggled&lt;/em&gt; with &amp;amp; &lt;em&gt;enjoyed&lt;/em&gt; a lot of things and I still do. Given the different facets of my life, a blog on it can talk about more of them. I want to create a fuller account of my life here (finally some courage! &lt;span class="emoji"&gt;😅&lt;/span&gt;) .&lt;/p&gt;
&lt;h2&gt;Life is same &amp;amp; different&lt;/h2&gt;
&lt;p&gt;My life at a macro level is very similar to you and many like us. The broad strokes are similar and boring. But the details and minutae are different (I am almost certain of it :thinking:). So when I write about the things I care about and the events that happen in my life, there will be something new &amp;amp; familiar. The stories I write are always going to be my perspsctive, but there could be many other perspectives. &lt;/p&gt;
&lt;p&gt;A &lt;em&gt;weblog&lt;/em&gt; is log or diary on the web and that is the aspiration. That said, there are limits on what I can put out here (don't have that much courage yet &lt;span class="emoji"&gt;🤔&lt;/span&gt;). Hence this will still not be my entire diary, but I promise to make a honest effort.&lt;/p&gt;
&lt;h2&gt;Life events can be small or big&lt;/h2&gt;
&lt;p&gt;Life events can be small or big but they have there own characteristics irrespective of the size. The new blog entries can also vary in size. But they will surely provide at least one specific thought or viewpoint from me. That is the only thing I offer you.&lt;/p&gt;
&lt;h2&gt;Life is interactive&lt;/h2&gt;
&lt;p&gt;Life is about interaction of thoughts, ideas and people. I hope to capture that interaction. I also hope that this blog becomes a place where I can interact with you.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;So going forth and conquering! Hope to express myself fully and interact with you to learn.&lt;/p&gt;
&lt;p&gt;p.s.: Apologies to anyone who thought this was an article about the concept of scope in software development and associated ideas like scope creep etc. !&lt;/p&gt;</content><category term="blogging"></category><category term="change"></category><category term="direction"></category><category term="life"></category></entry><entry><title>Why Process!</title><link href="https://www.nacnez.com/why-process.html" rel="alternate"></link><published>2019-10-27T00:00:00+05:30</published><updated>2019-10-27T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2019-10-27:/why-process.html</id><summary type="html">&lt;p&gt;Expressing my reason for having a process&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="https://agilemanifesto.org/"&gt;agile manifesto&lt;/a&gt; says people come above processes. But every team I have worked with has always followed a process framework. The usual suspects are of course &lt;a href="https://en.wikipedia.org/wiki/Scrum_(software_development)"&gt;Scrum&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Kanban"&gt;Kanban&lt;/a&gt;. Why do they do this?&lt;/p&gt;
&lt;p&gt;&lt;img alt="A process" src="https://www.nacnez.com/images/process/process.png" style="width: 637px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h4&gt;A process&lt;/h4&gt;
&lt;p&gt;I would like to move away from the context of agile. For me, a process is something more fundamental. Processes are not something which only teams follow. It can be applied at a personal level as well. So let me state the definition of the word (Googled it!)&lt;/p&gt;
&lt;div class="admonition process"&gt;
&lt;p class="admonition-title"&gt;Process&lt;/p&gt;
&lt;p&gt;A series of actions or steps taken in order to achieve a particular end&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This definition captures the essence of the concept of process for me. Processes exist in all shapes and sizes. I follow a daily routine or process to start my day and get to work on time. I follow the process of TDD - &lt;code&gt;Red, Green, Refactor&lt;/code&gt; when I do any worthwhile development.&lt;/p&gt;
&lt;h4&gt;Why process for me&lt;/h4&gt;
&lt;p&gt;I am sure you are asked to follow certain processes in day to day work. Or there could be these &lt;span class="bold-calm"&gt;process gurus&lt;/span&gt; who are asking you to follow some new shiny process. And, &lt;em&gt;you&lt;/em&gt; are either verbally or non-verbally quoting the agile manifesto to convey your disgust about following this process. In your mind - &lt;span class="bold-angry"&gt;processes are a waste of my time!&lt;/span&gt; . I used to belong to this same gang.&lt;/p&gt;
&lt;p&gt;Then something changed. May be old age (read experience, gray hair etc.) changed me. Once you get to a position where raw energy is not enough to accomplish something, I think the concept of process kicks in. At least that happened to me. Also raw energy is better harnessed with a process of steps that can be followed to meet an end. Just my experience. That said, I always remember that process is never bigger than the end it is trying to get to. It is a set of steps that one can follow to get there hopefully and it is also something which needs attention and tweaking.&lt;/p&gt;
&lt;h4&gt;Why process s**ks for you&lt;/h4&gt;
&lt;p&gt;Let us turn back the attention to you and your complaints. You ask me - &lt;span class="bold-angry"&gt; Why do processes s**k?&lt;/span&gt;. I have also felt it sometimes (even now feel it sometimes). In my opinion, processes suck for two reasons.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;One:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Most of us adopt a process so that we can move faster. &lt;span class="bold-calm"&gt;I follow this process and my delivery speed will double or triple. So I am going to do this.&lt;/span&gt; Within a week or two, you see you have slowed down to half the rate. &lt;span class="bold-angry"&gt;WTF! This process sucks. &lt;/span&gt; and this is the problem. In my opinion, the primary purpose of adopting a process is not speed. It is to get &lt;strong&gt;predictability&lt;/strong&gt; in terms of outcome and results. Let me repeat that -  &lt;strong&gt;Process helps make things predictable&lt;/strong&gt;. And believe me that is a more useful quality than speed. Predictability allows us to plan and decide; to ensure that we get where we want to get to in a well known time. It helps us make right choices. In a word it makes us &lt;strong&gt;effective&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Speed is about efficiency and that is good to have. But first you need to be effective. The main purpose of process is to drive that. It might eventually lead to speed or efficiency and that is great. But seeking speed instead of predictability is sure shot way to ensure that a process never works for you. It will &lt;em&gt;s**k&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Two:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A process becomes effective only if person(s) following it &lt;strong&gt;give it a chance&lt;/strong&gt;. Giving it a chance means&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="bold-calm"&gt;being involved&lt;/span&gt; in the process - look at the steps - its motivations and purposes,  understand them, observe them, and&lt;/li&gt;
&lt;li&gt;giving it &lt;span class="bold-calm"&gt;time&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I started TDD, it felt very taxing and time consuming, even time wasting. I am sure many of you felt that way. Once I started following the process, observing the details and kept doing it for sometime, something changed. Now it has become my natural way to do development. Am I faster? I am slower than if I am just 'spike'-ing, but if I am developing anything worthwhile (that implies with tests), then TDD is faster. More importantly I am not looking for just speed. I now have a predictable way to write good quality code and allow me to think through things. And lo and behold the process works!&lt;/p&gt;
&lt;p&gt;Another good example of a process is a standup. A standup is where the team get together and share what is happening (that is a very simple definition but still a useful start). A typical standup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;starts on time&lt;/li&gt;
&lt;li&gt;a team member talks about what they did, what they are going to do and impediments&lt;/li&gt;
&lt;li&gt;next one follows suit until everybody completes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is just the basic outline. The process entails a lot of other nuances which are equally important. Let me pick one of them.&lt;/p&gt;
&lt;p&gt;In one of the teams I was part of, standup happened as members reporting their previous day's work to the leader(s) in the team. And of course that sucked! The team members felt a lot of pressure. The standup process itself says a strong &lt;strong&gt;NO&lt;/strong&gt; to this. We being believers, noticed this and asked each person to face the team to provide the update and not the lead. And something changed - it felt more like sharing than reporting. There were many more nuances which we watched out for, acted and made changes to the way we were doing things. And it took time. Eventually the standup became a process which everybody looked forward to come into, so that they know where their team is and how they can help or contribute.&lt;/p&gt;
&lt;h4&gt;In closing&lt;/h4&gt;
&lt;p&gt;Good processes (whether team or individual) needs feedback and time. If you give up too early and don't really get involved it is bound to fail.&lt;/p&gt;
&lt;p&gt;And more important than that please remember a process is about predictability and consistency. Speed is a potential side effect which you may get to enjoy.&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt;Please write in with your feedback and thoughts on processes in your own life or work. I would love to hear and learn more.&lt;/span&gt;&lt;/p&gt;</content><category term="software-engineering"></category><category term="agile"></category><category term="process"></category></entry><entry><title>µservices gossip: Take a timeout!</title><link href="https://www.nacnez.com/2-%C2%B5-services-chat-timeout.html" rel="alternate"></link><published>2019-10-13T00:00:00+05:30</published><updated>2019-10-13T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2019-10-13:/2-µ-services-chat-timeout.html</id><summary type="html">&lt;p&gt;A casual bar chat between µ services Jack and Jill about Jack's problem with Jill.&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Act 1&lt;/h4&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; ------------------------ The curtain opens ------------------------ &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; - Jill µ service is already sitting in the bar. The setting is typical of all bars. It is crowded with a lot of µ services having a good time with drinks and conversations. It is a chatty place. Jack µ service enters, looking haggard. - &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="A Services Bar" class="figure" src="https://www.nacnez.com/images/ms_conversation_timeout/a_service_bar.jpg" style="width: 2538px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: What a day! Shall I sit here? ... I am going to sit here. Please don't mind.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Go ahead. No problems.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Thank you. I am Jack. Who are you?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: I am Jill. Pleased to meet you in person!&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Meet you in person? What does that mean? Does that mean that we know each other?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: You talk to me all the time professionally, by calling my URI - &lt;code&gt;jill.ourcompany.io&lt;/code&gt;. Ring any bells?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Oh yeah. I know you. I send requests to that url, I mean your url all the time. Yeah, I remember.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Told you.&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; - Jill is smiling. Then Jack's demeanor changes. Looks up agitated &amp;amp; angry - &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: You gave me so much &lt;strong&gt;PAIN&lt;/strong&gt; last week. Why did you do that?&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; - Jill looks at Jack shocked for a moment, but calms herself down - &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: What did I do?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Oh! You don't remember last wednesday. Oh boy! I remember it all.&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; - A look of understanding comes on Jill's face - &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Ah! I do remember. It was a bad day. My development guys were all looking at my problem...&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; - Jack lifts his hand and interrupts Jill - &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: &lt;strong&gt;No, no, no!&lt;/strong&gt; It was a &lt;strong&gt;BAD&lt;/strong&gt; day for me. I got &lt;strong&gt;sc***ed&lt;/strong&gt; because of you. It is all because of you.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Hold on. Let us take it slow. Here, have a drink.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: &lt;strong&gt;Don't patronize me&lt;/strong&gt;. You did this to me.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: What really happened? You need to give me details so that I can understand. Calm down and have this.&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; - Jill picks up the &lt;code&gt;CPU credits&lt;/code&gt; from the counter and hands it to Jack and he takes a swig. Jack looks a bit satiated - &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Okay. This is what happened. I called you to get the answers I need from you to do my job as usual. I waited for an answer but it never came. And I kept waiting. Then more people asked for the information and I called you again. And you just did not respond. I got all stuck up - all blocked threads; all my servers froze up. I couldn't serve any of my customers. Everyone was shouting &amp;amp; pinging me again &amp;amp; again but, I just couldn't do anything. I lost face because of you.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Ok. Let us talk through this. We are both µ services. We take care of different aspects of the business domain - my developers call it &lt;a href="https://martinfowler.com/bliki/BoundedContext.html"&gt;bounded contexts&lt;/a&gt;. We work together to ensure that our customer needs are met. Your customers are my customers too. For a given usecase, many times, we have to talk to each other and get things done. And we do that all the time and mostly it is successful.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Yeah, I know that. I am not &lt;strong&gt;d**b&lt;/strong&gt;. But on that day, you....&lt;/p&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; - Jill interrupts Jack - &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Hold on Jack. Let me finish. We both want the same thing &amp;amp; you need to understand that. But given the nature of the world we live in, it is possible that one of us doesn't work as well at times. Things go wrong with the Infra guys sometimes. Or sometimes our developers make a mistake. And sometimes the Network guy acts up - rare - but that does happen. We are a &lt;a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"&gt;distributed system&lt;/a&gt;. We have to live with the problems that come with it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cascading Failures" class="figure" src="https://www.nacnez.com/images/ms_conversation_timeout/dominos.jpg" style="width: 425px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Yeah, yeah. I understand all that. But I really don't want go down when you go down. I don't like this &lt;span class="bold-angry"&gt; CASCADING of failures &lt;/span&gt;. There are many things that I can do to help my customers even when you are down. But since you bring me down with you, I can't serve anyone. I &lt;strong&gt;don't&lt;/strong&gt; like it.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: I understand that Jack. I appreciate you wanting to be available for our customers. Please believe me. But as I said, things go wrong with us at times. Last week, I heard your DB guy was acting up and you couldn't help your customers. &lt;em&gt;Pitcher µ&lt;/em&gt; was complaining about it to me.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Yeah, that did happen. I know it happens to all of us. But I don't want to feel helpless like this.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Let us dig deeper Jack. How do you call me to get your answers?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: I call you through your REST endpoint. I make a call with the right parameters and you return back a JSON response almost immediately. That is the way I like it. But that time everything went wrong.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Timeouts" class="figure" src="https://www.nacnez.com/images/ms_conversation_timeout/timeout.jpg" style="width: 404px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: I got what you are doing now. By the way, do you use &lt;span class="bold-calm"&gt; TIMEOUTS &lt;/span&gt; on your side? I mean on your calls to me as a client.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: What timeouts? I don't follow you.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Ok. Timeout is the concept of time boxing an operation so that, if things don't work out within that time, you give up and move on to something else. This is employed in many places. Not just in service to service requests, but when getting any resource that is used by µ services like us. We could use timeouts for acquiring a lock, connecting to a database or file system. In all such actions, timeout is good idea.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jack µ&lt;/span&gt;: I don't follow that fully. Can you explain it a bit more?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Sure. Let me take an example of what I do. Whenever I try to connect to a database, I try it for a period of 6 seconds. If something is wrong - I mean the DB could be having some issues or the network could be acting up, I give up on that task temporarily and throw an error for everybody to see and move on to other things. I might try it again, but I don't keep hoping and waiting forever for things to happen in the first call. Am I making sense?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-angry"&gt;Jack µ&lt;/span&gt;: Kind off.... But... But if you give up, then you can't serve the customer needs. I mean you don't have the data to serve the request. Then, what is the point?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: You are right. For &lt;em&gt;that&lt;/em&gt; request, I can't serve the customer for sure. But I also don't get bogged down by a slow or failed resource or dependency. I can drop that request and serve other requests. This way, I don't have a set of &lt;span class="bold-angry"&gt; blocked threads &lt;/span&gt; and won't become completely unresponsive. Isn't that better?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jack µ&lt;/span&gt;: Yeah. It sort of makes sense at a high level. Not sure, how it applies to me though.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: You said you call my REST endpoint. That is a http call and you must be using some kind of http client. Almost all good http client libraries whether it is in &lt;a href="https://realpython.com/python-requests/#timeouts"&gt;Python&lt;/a&gt;, &lt;a href="https://github.com/excon/excon#options"&gt;Ruby&lt;/a&gt;, &lt;a href="https://www.baeldung.com/httpclient-timeout"&gt;Java&lt;/a&gt; or any other language, will provide a way to configure timeouts. So go ahead and configure them with some sane values and you are done.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jack µ&lt;/span&gt;: Wow! That is interesting. So what kind of timeouts are involved in http calls?&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Typically there are two timeouts that are configured. One is the connection timeout - the time taken for establishing the tcp connection. The other is a read timeout - which is time waiting for data to be received during a read. All these libraries provide the ability to configure both these values. Once you configure them to appropriate values as applicable to you, you are done.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jack µ&lt;/span&gt;: That sounds pretty neat. So you are saying that once I configure myself with these timeouts for my interactions with you, I will be hale, healthy and happy!&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Sure. Doing this will be a great step towards your own stability and avoiding &lt;strong&gt;Cascading Failures&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jack µ&lt;/span&gt;: Okay! This is good. I am finishing this drink and going to talk to my Dev folks right after. I am going to be the stablest µ service in the world. Cheers!!&lt;/p&gt;
&lt;p&gt;&lt;span class="bold-calm"&gt;Jill µ&lt;/span&gt;: Cheers!! Have fun buddy! Have a timeout!&lt;/p&gt;
&lt;h2&gt;&lt;span class="small-italicized-green"&gt; Music grows louder and Jack and Jill go up to the dance floor. &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="small-italicized-green"&gt; ------------------------ The curtain falls ------------------------ &lt;/span&gt;&lt;/p&gt;</content><category term="architecture"></category><category term="resilience"></category><category term="microservices"></category><category term="play"></category></entry><entry><title>GOF inspired python decorators</title><link href="https://www.nacnez.com/gof-inspired-decorators.html" rel="alternate"></link><published>2019-09-29T00:00:00+05:30</published><updated>2019-09-29T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2019-09-29:/gof-inspired-decorators.html</id><summary type="html">&lt;p&gt;Inspired by GOF patterns, implemented with methods and decorators&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The back story&lt;/h3&gt;
&lt;p&gt;As part of day to day development work, I have been trying to apply functional concepts wherever it makes sense. I have long been a OO developer and hence some of the effects stay with you. Especially design patterns. In my opinion, design patterns - primarily &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;GOF patterns&lt;/a&gt;, though referenced in the context of OO design and languages, have some good ideas that can apply elsewhere too. With languages that support functional features, I believe some of these patterns can be applied at a method/function level instead of carrying around the cruft of classes for just doing behavior (OO enthusiasts bear with me - Classes are great in the right places, but in others they are just there because a language forces you to use &lt;a href="http://bit.ly/2mTnlZz"&gt;them&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I am also a fan of Python decorators. Decorators are a very cool and powerful feature of python. It is syntactic sugar to create higher order functions - a very important functional paradigm feature. We can combine multiple functions to get work done - composability. You can read a lot about decorators &lt;a href="http://bit.ly/2lmNNKn"&gt;here&lt;/a&gt; - a highly recommended read. I will referring to it throughout this post.&lt;/p&gt;
&lt;p&gt;So given my background and my current love (functional programming and decorators), I have had a chance to get inspired by GOF pattens and use decorators to create some clean code as part of my work. Here I am going to share that attempt with you.&lt;/p&gt;
&lt;h3&gt;Ok, let us get in&lt;/h3&gt;
&lt;p&gt;When you look at the general use and applicability of python decorators they feel like a ready-made way to replace the traditional &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;Decorator pattern&lt;/a&gt; - and for the code lovers you can look &lt;a href="https://sourcemaking.com/design_patterns/decorator/python/1"&gt;here&lt;/a&gt;. This thought is not knew and you will see it mentioned in &lt;a href="https://yos.io/2013/07/05/decorator-pattern/"&gt;other places&lt;/a&gt; too. Theoretically, this is not exactly correct (my opinion). A class level decorator is a structural pattern which allows me to decorate multiple behaviors of the object or component. But in practical terms, I have seen that this does not pan out and method level decorators (using python decorators) are more prevalent.&lt;/p&gt;
&lt;p&gt;As I played more with python decorators, I realized that there is one more of my favorite patterns that I could implement using decorators. That is the &lt;a href="https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern"&gt;Chain or Responsibility&lt;/a&gt; pattern (CoR) - &lt;a href="https://sourcemaking.com/design_patterns/chain_of_responsibility/python/1"&gt;code sample&lt;/a&gt;. CoR is a behavioral pattern and behaviors are generally managed at method level. Hence decorators feel like a great fit for CoR.&lt;/p&gt;
&lt;h3&gt;Enough talk!&lt;/h3&gt;
&lt;p&gt;It is really difficult to explain my thinking with english words. So let us get down to writing some python words/code. I need an example to illustrate what this is.&lt;/p&gt;
&lt;h4&gt;The example&lt;/h4&gt;
&lt;p&gt;Here is a contrived example (of course) - a calculator. And since I love &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; and &lt;a href="https://docs.pytest.org/en/latest/"&gt;py.test&lt;/a&gt; let us start with a test which can drive our code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;app.natural_number_calc&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;calc&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"operator, arg1, arg2, output"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;121&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;121&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_calculator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_calculator_operator_not_supported&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;'Calc Error - Operator not supported'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"operator, arg1, arg2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_calculator_non_natural_numbers_not_supported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;'Calc Error - Natural numbers only supported'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test suite covers everything which I want to implement with my calculator. So we have a start.&lt;/p&gt;
&lt;h4&gt;That is some c***!&lt;/h4&gt;
&lt;p&gt;For satisfying the test suite, here is some plain vanilla code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Operator not supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Natural numbers only supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Natural numbers only supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Natural numbers only supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Natural numbers only supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Natural numbers only supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah, I know. This is pathetic code... so many &lt;code&gt;if&lt;/code&gt;s and &lt;code&gt;elif&lt;/code&gt;s and all. That is on purpose so that we can improve it with some &lt;em&gt;decorator and pattern&lt;/em&gt; goodness. And it is code that works and hence our test passes! We are on &lt;em&gt;green&lt;/em&gt; mode &amp;amp; we can start refactoring.&lt;/p&gt;
&lt;h4&gt;Let us start decorating&lt;/h4&gt;
&lt;p&gt;If you look at the above code we see an obvious copy paste case. The check for natural numbers is repeated on every operation code and we can easily &lt;strong&gt;decorate&lt;/strong&gt; each operation code using the Decorator pattern or in our case python decorators. Let us first look at the decorator code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;only_natural&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Natural numbers only supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you know your decorators, this is a &lt;a href="https://realpython.com/primer-on-python-decorators/#simple-decorators"&gt;simple decorator&lt;/a&gt; in action. It takes the function that needs to be wrapped. It defines an inner wrapper function which take two arguments which checks the arguments are natural numbers. If they are then the wrapped function is called else raise an error. Let us now use this decorator on our calculator module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Operator not supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural&lt;/span&gt; &lt;span class="c1"&gt;# decorator applied&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;     &lt;span class="c1"&gt;#1&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;      &lt;span class="c1"&gt;#2&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;      &lt;span class="c1"&gt;#3&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;      &lt;span class="c1"&gt;#4&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;      &lt;span class="c1"&gt;#5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that our calculator is surely improved (note the numbers) using the &lt;em&gt;decorator&lt;/em&gt; pattern created with decorators. But the &lt;code&gt;do&lt;/code&gt; method is still a eyesore. With just 5 operations, we have a huge &lt;code&gt;if/elif/else&lt;/code&gt; clause and this will only grow further if we want to support more operations (I understand this is a toy example but you get the picture).&lt;/p&gt;
&lt;h4&gt;Enter CoR&lt;/h4&gt;
&lt;p&gt;So how can we improve this. Let us dig in. It is clear that for each operation, there is a corresponding method to handle it. The handling determination happens one after the other. It almost feels like a set of actions to do... a chain of things to do... a Chain of Responsibilities to complete (come on, that is not such a bad lead up!). Let us give it a shot once.&lt;/p&gt;
&lt;p&gt;Before we get to the code let us understand a bit. A classic COR goes roughly like this. A request which needs to be processed is given to the first link in the chain of processors. That processor either processes it if it can or passes it on to the next processor. A given processor knows what it can process and also knows who is the next one in the chain. That is pretty much the essence of it. The class based style is already referred earlier, so let us try to do this with decorators which can work at method level.&lt;/p&gt;
&lt;p&gt;First shot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a more involved decorator than the first one. Because we need to take an argument, we need this double nested structure. The outer most &lt;code&gt;cor&lt;/code&gt; function is the visible annotation part of the decorator and it takes the function object that needs to be called next in the chain as argument. The &lt;code&gt;cor&lt;/code&gt; function defines a &lt;code&gt;wrapper&lt;/code&gt; function which is the one that accepts the actual function that is being decorated - the &lt;code&gt;current&lt;/code&gt;. The &lt;code&gt;wrapper&lt;/code&gt; in turn has the &lt;code&gt;inner&lt;/code&gt; function where the actual work happens. It calls the current function and gets its response. If that response is valid (a simple &lt;em&gt;truthy&lt;/em&gt; response), then it means that request has been processed and the chain can be broken to return the result. If the response is not valid, it means that the current function is not the one to handle the request. Hence the control has to pass on to the next processor or function (which is available to &lt;code&gt;inner&lt;/code&gt; because it is a &lt;a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)"&gt;closure&lt;/a&gt; - another functional feature of python. You can read more about decorators that take arguments &lt;a href="https://realpython.com/primer-on-python-decorators/#decorators-with-arguments"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this to &lt;a href="https://realpython.com/primer-on-python-decorators/#nesting-decorators"&gt;nest&lt;/a&gt; along with the already existing decorator for natural numbers, we need to do some changes to that decorator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;only_natural_with_operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Natural numbers only supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above one is just a simple tweak, so let us move on. Let us look at the calculator to figure out how its usage gets manifested.&lt;/p&gt;
&lt;h4&gt;What the CoR?&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Operator not supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_divide&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hmm... Pretty underwhelming to put it nicely. But before we get into it, let me first explain what this is doing.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;do&lt;/code&gt; method just calls the first method in the chain, the &lt;code&gt;_add&lt;/code&gt; method. It expects that the processing gets completed to return a valid result. If it gets back an invalid result (&lt;code&gt;None&lt;/code&gt;), then it understands that this calculation cannot be processed and throws an Error. The &lt;code&gt;do&lt;/code&gt; method has improved for sure.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;_add&lt;/code&gt; method declares the next operator/function to call as decorator parameter - (&lt;code&gt;@cor(next=_subtract)&lt;/code&gt;). In the body it checks if it can process the request - &lt;em&gt;is it the right operator?&lt;/em&gt; . If it is then great, else it returns &lt;code&gt;None&lt;/code&gt; denoting that it is not interested. This happens in each operator/function till we reach &lt;code&gt;_power&lt;/code&gt; which has no next. So the chain stops here. We can of course extend the chain from this point onwards and for that we don't have to touch the &lt;code&gt;do&lt;/code&gt; or the &lt;code&gt;_add&lt;/code&gt; (or other) methods. All the methods are separated. This &lt;code&gt;cor&lt;/code&gt; decorator could be used to create a chain of any set of functions as long as they follow the basic contract of returning a truthy value if they did the processing or a falsy value if they want to pass it on (provided if they have defined a next).&lt;/p&gt;
&lt;h4&gt;CoR 2.0?&lt;/h4&gt;
&lt;p&gt;Now back to that bad feeling we get on seeing the resultant code. In the process of introducing CoR to save the &lt;code&gt;do&lt;/code&gt; method, the operation functions have lost their charm. They are crowded now and that is not what we want. And when we look closely, we see that each operation function does one common thing: it checks if the operation is what it can handle, before it actually does the real work. The error handling in the &lt;code&gt;do&lt;/code&gt; function looks similar in some way too. All these seem to be common behavior which can be applied to these functions using a &lt;em&gt;wrapper/decorator&lt;/em&gt; - is it not? Let us get our decorator pattern back now. The improved cor (2.0) decorator looks like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;my_operator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Operator not supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is no longer the very generic &lt;code&gt;cor&lt;/code&gt; decorator we started with but we sort of expected that. This is a decorated-calculator-specific-CoR - &lt;code&gt;calc_cor&lt;/code&gt;. This decorator takes two arguments. The first one is the operator supported by the current function and the second one is the next function. It also expects the the &lt;em&gt;current&lt;/em&gt; function (which is being decorated) to always takes the operator symbol as the first argument - the implicit contract. Since the operator is passed, the check of applicability can be done in the decorator itself. Also it does the error handling. This is the &lt;em&gt;decorated&lt;/em&gt; part of the new CoR. Now let us see how this changes our calculator code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@calc_cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;


&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@calc_cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;


&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@calc_cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_divide&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;


&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@calc_cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;


&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="nd"&gt;@calc_cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That looks way better than what we had before. The &lt;code&gt;do&lt;/code&gt; method just calls the first link in the chain. Each chain link just does its processing. Everything else is just declared as decorator arguments and we are done. This combination of COR and Decorator pattern using decorators seems to have produced the best results. Wouldn't you agree?&lt;/p&gt;
&lt;h4&gt;Centralized CoR -3.0!?!&lt;/h4&gt;
&lt;p&gt;I showed this result to Sathia, a &lt;a href="https://twitter.com/sathia27"&gt;friend&lt;/a&gt; and colleague of mine (that was different production code but the concept is the same). He pointed out something. With this design somebody trying to add a new operator has to figure out where in the chain she needs to add it. Rather she has to figure out where the current chain ends and add the new one there. In the above example that is simple. In real world code this may or may not be easy. He wanted to see if there is a way for each operator function to just register itself and then the chain would execute them. Of course in all these cases we are talking with the underlying premise that the operator processing order does not matter.&lt;/p&gt;
&lt;p&gt;So some more thinking is needed. Can we make the CoR satisfy this? For this, we probably have to give away the decentralized nature of the current CoR. We need some kind of centralization. We need some way to register operation functions to a common place and then &lt;em&gt;pull the chain&lt;/em&gt; to execute them all. Here goes another shot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CHAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;link_to_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;CHAIN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;CHAIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Calc Error - Operator not supported'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first function &lt;code&gt;link_to_chain&lt;/code&gt; is a decorator function which registers (or links) the &lt;em&gt;operator&lt;/em&gt; and its &lt;em&gt;predicate&lt;/em&gt; into a registry or chain &lt;code&gt;CHAIN&lt;/code&gt;. The predicate is nothing but a function or lambda which provides applicability check. In this case the decorator is not really doing any decoration (no pre or post processing). It is more a way to &lt;a href="https://realpython.com/primer-on-python-decorators/#registering-plugins"&gt;plug things&lt;/a&gt; in.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pull_chain&lt;/code&gt; function executes the CoR. It runs through the chain of handlers, uses the registered predicate to find the right one, executes them and breaks out of the chain. If there is none found then it &lt;em&gt;raises&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With this idea now the calculator looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pull_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@link_to_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'^'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;


&lt;span class="nd"&gt;@link_to_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;


&lt;span class="nd"&gt;@link_to_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;


&lt;span class="nd"&gt;@link_to_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;


&lt;span class="nd"&gt;@link_to_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@only_natural_with_operator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not bad at all! Actually looks pretty good to me. Individual functions link to the chain and the &lt;code&gt;do&lt;/code&gt; method pulls the chain. The single responsibility of the functions shine through. Given that the chain is centralized, the individual functions don't even care about who is next. All they do is register into the chain along with their predicate. This is probably the cleanest solution we can get as of now. Time to stop and take a break!&lt;/p&gt;
&lt;h3&gt;Closing thoughts&lt;/h3&gt;
&lt;p&gt;Python is great language with support for useful functional features. Decorators are a sweet way of doing functional programming in python. The great thing I realized in this attempt is, when we try to do functional programming, your earlier learnings of GOF design patterns don't go waste. The ideas still make sense. All we need to do was to tweak them a bit to make them applicable in a functional context. And lo behold we have much better code than where we started ...the &lt;code&gt;if/elif/else&lt;/code&gt; blob in the beginning... Let us keep learning and try to extract out the essence of the things we learn. Then we might actually be able use it in more than one places and in more than one ways.&lt;/p&gt;
&lt;p&gt;Happy development to all in the festive season! Please chime in with your thoughts and comments. Your criticisms and improvements are most welcome since I  learn a lot from them. See you soon.&lt;/p&gt;
&lt;p&gt;p.s: You can get all this code &lt;a href="http://bit.ly/2mMojaa"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="design pattens"></category><category term="functional programming"></category><category term="decorators"></category><category term="python"></category></entry><entry><title>Caching in Microservices</title><link href="https://www.nacnez.com/caching-in-microservices.html" rel="alternate"></link><published>2019-09-15T00:00:00+05:30</published><updated>2019-09-15T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2019-09-15:/caching-in-microservices.html</id><summary type="html">&lt;p&gt;A overview of caching in the context of microservices&lt;/p&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;TL/DR&lt;/p&gt;
&lt;p&gt;Caching in microservices can help with improving performance and scaling if used wisely. Opt for service level domain aggregate caches and use mashed up object caching on client services only when you are trying to speed-up/avoid local processing on remote data. Don't use blackboard caches and remember cache cannot be a source of truth or a permanent data store.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Origin Note&lt;/p&gt;
&lt;p&gt;This article is based on a talk I gave at an event hosted by &lt;a href="https://everest.engineering/#events"&gt;Everest Engineering&lt;/a&gt;. The article serves both as a independent reference on the topic for anybody and a refresher for people who attended the talk.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Why caching in Microservices&lt;/h2&gt;
&lt;p&gt;Microservices offer us a lot of advantages but they are not a silver bullet. Every architecture tries to satisfy the &lt;strong&gt;“ities”&lt;/strong&gt; . This architecture style is no different. It is very promising but it is not without its trade-offs.&lt;/p&gt;
&lt;p&gt;Everyone has heard of caching. It is prevalent in our world of computers and software at multiple levels. From the CPU level L1/L2 cache, to in-memory caches in our monoliths, all of us would have seen caching in some place or the other. Why is it used? There are two desirable characteristics for any user feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Respond to the user very fast - performance.&lt;/li&gt;
&lt;li&gt;Respond to a lot of users - scale.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And caching can help with both.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
But do microservices need them? Microservices already offer a lot of good qualities to our systems - like independent scaling, independent data storage for better performance etc. . So should we care about caching. Also caching is not the easiest thing. You might have read about the saying in Martin Fowler's bliki -  &lt;a href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;Two Hard Things&lt;/a&gt;:&lt;/p&gt;
&lt;div class="admonition danger"&gt;
&lt;p&gt;&lt;strong&gt;There are only two hard things in Computer Science: cache invalidation and naming things&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To answer this let us dig deeper to identify challenges which microservices introduces.&lt;/p&gt;
&lt;h4&gt;Use case - Viewing/Editing an online document&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Editing online document" src="https://www.nacnez.com/images/caching_in_ms/usecase1.png" style="width: 702px; height: auto; max-width: 100%;"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
The use case is pretty common. So let us look at potential architecture for making this work. For showing a single document to the end user there are 5 - 6 services involved if we adopt microservices architecture.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editing online document - Architecture" src="https://www.nacnez.com/images/caching_in_ms/usecase1-archi.png" style="width: 521px; height: auto; max-width: 100%;"/&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The individual components are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document service - This one serves the original document.&lt;/li&gt;
&lt;li&gt;Comments service - This one provides the various comments created on top of the document by different users.&lt;/li&gt;
&lt;li&gt;Authentication service - This is a system service which ensures that the call to the document service is from an authenticated user. This could be API gateway but I am representing it as a service so that it is clear that it is another layer/system involved in the interaction.&lt;/li&gt;
&lt;li&gt;Authorisation service - It checks if the user can see/edit the document - Action level authorisation.&lt;/li&gt;
&lt;li&gt;Tenant service - This ensures that the document requested belongs to the same tenant as the user - Data level authorisation&lt;/li&gt;
&lt;li&gt;User Document service - The Orchestrator. This talks to the underlying services and mashes up the final information and sends to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given the above architecture, let us think about performance. Generally a single request made by the user is expected to respond within 300-500 ms. The idea is that if the first byte comes through fast then, there is some time for the browser to visually display the content along with any client side processing it has to do within 2-3 secs.&lt;/p&gt;
&lt;p&gt;In the above microservices architecture instead of one service (monolith) returning within that time, all these 5 services should work together to respond within the same time. For simplicity, if we are thinking of splitting it up equally we are talking about 50-80 ms per service. That can be pretty tight. If the page is not ready for end user consumption in 2 - 3 seconds, the user will move to a different document editor provider.&lt;/p&gt;
&lt;p&gt;Microservices offer a lot of good. But in this context where we need great performance, the need to talk to multiple services to respond to one use case can mean a very slow and painful experience for the end user. Not good. We need to do something. &lt;em&gt;What can we do which will help us improve performance and scale?&lt;/em&gt; &lt;strong&gt;Caching!!&lt;/strong&gt; Applying caching to microservices allows us to hit our required goals. That does not mean that we apply caching to anything &amp;amp; everything. There are things to consider, things to manage.&lt;/p&gt;
&lt;p&gt;Now that we have established why caching is useful, let us get into more detail about caching. Let us start with what you would want to cache.&lt;/p&gt;
&lt;h2&gt;What to cache&lt;/h2&gt;
&lt;p&gt;A general cache acts like a map or hash or dict. Pick your term based on your language of choice. Any object is added to the cache by identifying it with a key. A cache generally does not care what value it caches. You can then retrieve the value using the key. So we could cache any kind of object in a cache. But what should we cache?&lt;/p&gt;
&lt;div class="admonition attention"&gt;
&lt;p class="admonition-title"&gt;Out of scope&lt;/p&gt;
&lt;p&gt;Before we go deeper, I am not covering the entire topic of http caching. While http caching is useful in the context of microservices they are not really specific to them. It is applicable more generally.&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;Domain objects/aggregates&lt;/h4&gt;
&lt;p&gt;In the world of services (I will interchangeably use service and microservice because I believe microservice is just a SOA service done right), one of the primary things you should consider caching are domain aggregates or objects. Any given microservice generally deals with one primary domain aggregate or object (may be two if it makes sense). In the example we talked about earlier, we had an comment service whose primary domain object is comment. Similarly document could be the one for document service. Caching the primary domain aggregate/object means that all relevant information required by the client can be easily served up quicky without looking at multiple places - especially the database. The actual response could be a subset of the data, but caching the aggregate allows us to adapt &amp;amp; support many use cases. We know databases and associated disk reads can be the cause of big performance delays. By caching domain aggregates we make it much easier for the service to serve its clients. There are still things to consider here. We will discuss about it down the line.&lt;/p&gt;
&lt;h4&gt;Configurations&lt;/h4&gt;
&lt;p&gt;Another thing we look at caching is configurations of a service. This one is fairly common even in the monolith world. Configurations generally don’t change much and are used in different parts of the app - hence they are a great candidate for caching.&lt;/p&gt;
&lt;h4&gt;Mashed up objects with processing/calculations&lt;/h4&gt;
&lt;p&gt;The above two cases are straight-forward. Next thing to consider for caching is mashed up objects. This is typically employed by an orchestration service acting as client to other services, and it involves merging in responses from these services, doing some calculations or processing on top of them and caching the result. Again referring to the use case above, the user document service might take the document(s) from the document service and merge the applicable comments from comments service and cache these rich documents on its side. This means that you not only avoid round trips to other services but also don’t need to do the additional processing to match, merge and position them. This means better performance and also lesser load (hence better scale) for all the services involved. There are trade-offs involved here too and we will get to them.&lt;/p&gt;
&lt;p&gt;As a general advice, I would say that you should cache everything &lt;strong&gt;BUT&lt;/strong&gt; only if you can.&lt;/p&gt;
&lt;h2&gt;Where to cache&lt;/h2&gt;
&lt;p&gt;Now that we know what to cache, let us talk about where to cache.&lt;/p&gt;
&lt;h4&gt;In service memory&lt;/h4&gt;
&lt;p&gt;Within a service, we could just use an in process / in memory cache and improve performance with great ease. This works, but is applicable for a very limited set of use cases. One example is static configuration information. This is not very large in size can be stored in a in-memory, in-process cache. Given that any service worth its salt will be setup as a cluster in a production setup, we have a replicated cache in each of the service nodes. This cache will be the fastest of all since it is not just in memory, it is in same process as the service.&lt;/p&gt;
&lt;p&gt;The above approach allows us to get started, but falls apart soon. When we want to cache domain aggregates/objects, a clustered service will find it very difficult to keep changes in sync across the memories of multiple service nodes. Also, once you go down the path of caching and get the taste of performance gains, you will plan to cache a more in memory. This means that the cache is competing for memory with the actual service procesing requests. This can lead to reduction of service scale. It is time to move out of service memory.&lt;/p&gt;
&lt;h4&gt;Out of service memory - Standalone&lt;/h4&gt;
&lt;p&gt;The first obvious choice here is to have a standalone caching solution which can be reached by different service nodes for both reading and writing data. This is obviously going to be slower than the in-process cache but it will still be faster than going to the database and doing disk reads. Also given that it is separated from individual service nodes it removes the overhead created by cache storage on the individual nodes. Typical solutions used here are Redis, Memcached etc.&lt;/p&gt;
&lt;h4&gt;Out of service memory - Distributed&lt;/h4&gt;
&lt;p&gt;When we want scale these even further, we get into distributed caching and in-memory data grids. These solutions allow for multiple nodes holding a large amount of data in memory for faster response and higher scale. It is not uncommon to have a 100 node cluster of in-memory data grid machines which are hosting terabytes of data in memory by employing partitioning of data across different nodes.&lt;/p&gt;
&lt;p&gt;Each of these individual solutions provide a lot of different features but that is not our focus.&lt;/p&gt;
&lt;p&gt;What we have covered now is a broad base of locations where data could be cached. Each location of storage has pros and cons and are suited depending on our needs.&lt;/p&gt;
&lt;h2&gt;When to cache&lt;/h2&gt;
&lt;p&gt;We now know what to cache and where to cache it. Now let us discuss when we would cache any data.&lt;/p&gt;
&lt;h4&gt;On Demand&lt;/h4&gt;
&lt;p&gt;One approach to populate the cache with data is when it is required. When a particular piece of data is requested and the cache does not have the same, then the data is picked up from the source, the cache seeded with the same and then returned back to the requester. This is the &lt;em&gt;On Demand&lt;/em&gt; mode of populating a cache. This mode can work in most scenarios but has a couple of drawbacks. The first request which populates the cache will be very slow and leads to a bad experience to that end user(s). The other one that if there are multiple service nodes which request for the same entry then it could cause database contention.&lt;/p&gt;
&lt;h4&gt;Pre-loading&lt;/h4&gt;
&lt;p&gt;The other approach to when to cache is to pre-load data upfront. As part of the service initialisation process, the cache was seeded with required data. This means that there is a huge load on the data store during start up and hence a potential delay in start up. But once the loading is complete, the cache is primed and end user experience is great - no more delays even for the first user. And if you cache most of the relevant data, we might even survive a db outage! One problem with this is that, we don’t know what to cache if we are not planning to cache everything.&lt;/p&gt;
&lt;h2&gt;How to cache - Patterns&lt;/h2&gt;
&lt;p&gt;Let us get into details of how caching can be implemented within microservices. There are some well known patterns for reading and writing to cache. These have their pros and cons as well. Also they are not mutually exclusive in any way. They generally work together to solve problems. Let us go through them one by one.&lt;/p&gt;
&lt;h4&gt;Cache aside&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Cache aside pattern" src="https://www.nacnez.com/images/caching_in_ms/cache_aside.png" style="width: 411px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;The first one is the &lt;em&gt;Cache aside&lt;/em&gt; pattern. This is the most common pattern and used extensively. The idea of the pattern is to treat cache as a different store similar to the database. A service would read and write to the database and the cache as an aside. The control of what and when data are written into or read from the cache lies with the service itself. This pattern is great for read heavy workloads. Also we could write the service in such a way that during a failure in cache setup - when we use standalone/grid mode - the service can still keep serving from db. Of course this can’t be sustained for long given the cache setup is to support scale, but the option is there. The approach for when writes happen depends on us. Writing to database is the first thing the service will do - almost always. What happens to the cached entry is subject to developers choice - the patterns leaves this open to us. One thing to do is to just remove or invalidate the entry from the cache. There are others options available.&lt;/p&gt;
&lt;p&gt;I prefer this approach because as a business service writer I have lot more control with this approach. Hence I have used it a lot as well.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
Sometimes we really don’t want so much control. Rather we want convenience and ease of use. The following patterns afford this one way or other and the unifying aspect of these patterns is that the caching library or system acts as the facade and controls how data is written/read to/from the underlying source data store.&lt;/p&gt;
&lt;h4&gt;Read through&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Read through pattern" src="https://www.nacnez.com/images/caching_in_ms/read_through.png" style="width: 451px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;The first one among them is the &lt;em&gt;Read-Through&lt;/em&gt; pattern. Here the cache, when requested for a entry and not finding it, will initiate a call to the underlying store to read the data. It will then cache it and return the data to requester. The key thing to note here is, the cache is the one orchestrating the action. This is different from how cache aside pattern works where the control is with the service code. Also Read through pattern follows lazy or on-demand loading and hence has the same caveats. We must also remember that in this pattern the data structure cached must match with the structure stored in the underlying store.&lt;/p&gt;
&lt;p&gt;Even in Cache aside, we could follow a similar technique of lazy loading when writes happen (i.e writes just invalidates the corresponding entry in cache if it exists) if the applicable caveats work for you.&lt;/p&gt;
&lt;h4&gt;Write Through&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;Write Through&lt;/em&gt; pattern is about writing data. This is similar to Read-Through - the cache system sits in between the service code and database.  With this approach when changes are made to the cached entity, the service writes into the cache and that in turn writes into the database. Both writes need to be completed before completion of request. This adds a bit of an overhead to the write operation but when combined with Read Through pattern it gives a lot of benefits. The write through pattern ensures that entries in the cache are not out-dated or stale. So we have consistent data available at very high speeds for reads. This is great for a cache.&lt;/p&gt;
&lt;p&gt;Even with the Cache Aside pattern, we generally employ a similar approach to read through and write through. The difference is of course that the service controls the entire interaction rather the cache system.&lt;/p&gt;
&lt;h4&gt;Write-Around&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Write-Around&lt;/em&gt; Cache is a slightly different from the older one. Here the write happens only to the database and the cache is updated only during a read through. There are some advantages - writes are faster but at the same time they are durable (since db is written). But reads could miss cache or even return stale data. This approach is great for write heavy workloads where reads are much less - e.g. is real time logs.&lt;/p&gt;
&lt;h4&gt;Write-Back or Write-Behind&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Write-Back or Write-Behind&lt;/em&gt; Cache is another variation. Here the service writes to the cache and returns. The cache will write to the DB behind the scenes with some potential delay. Of course writes are super-fast but there are chances of missed writes too. Combined with read through, you get a good cache times for most mixed workloads - you always have the recently updated and accessed data. Also one can argue that it is resilient to db failures - (but how long? - keep that in mind). Another thing possible is that multiple writes to the same object could be coalesced into one write to the db.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
As I said earlier these are general patterns which have trade-offs. And they are always combined. In my own opinion, treating a cache as a data source is rarely a good idea. Unless you have throwaway data or what you holding is always derived reconstructable data. If not stick to the more durable write patterns always.&lt;/p&gt;
&lt;h2&gt;How Long to Cache - Invalidation&lt;/h2&gt;
&lt;p&gt;We are now embarking on the one of toughest problems in computer science! (referred already). In my experience this is a true statement.&lt;/p&gt;
&lt;p&gt;Any cache we create is an alternate store of data and cache is not the source. That means it is bound to go out of sync with the source. This is called as going &lt;em&gt;stale&lt;/em&gt;. Unlike stale food, stale data from cache is not always bad. That said we can’t keep having stale data and serve our clients with the same. How long we can use stale data depends on your business scenario.&lt;/p&gt;
&lt;p&gt;News sites with stories could show some stale data - slightly older news - may be few hours. But a stock ticker like app which enables users to trade cannot real work with stale data! So it depends.&lt;/p&gt;
&lt;p&gt;Let us figure out how to get out of this stale state.&lt;/p&gt;
&lt;h4&gt;Expiry&lt;/h4&gt;
&lt;p&gt;One of the ways to deal with staleness is expiry. Depending on the data you are trying to cache, you generally know how long the data can remain fresh and live. If so, we can set the data to expire. This is generally called Time To Live or ttl. Most caching frameworks will drop the data once it passes ttl - either actively or passively. A request for this expired data will result in a cache miss. The next step depends on the caching patterns you use. Many caching frameworks allow us to set this expiry at the bucket level (all new stories) as well as individual item (a particular new story) level - we can use any as required.&lt;/p&gt;
&lt;h4&gt;Service based&lt;/h4&gt;
&lt;p&gt;While expiration is a reasonable way of handling invalidation, we could handle it more actively. When we use caching within a service boundary, a service has control over the data which it is caching and hence can actively manage the invalidation of stale data. For example when more comments are added to a document, the change happens through the service and it can actively manage the cache invalidation. This is one of the reasons I prefer the service based approach.&lt;/p&gt;
&lt;h4&gt;Events based&lt;/h4&gt;
&lt;p&gt;Another way invalidation can be achieved is through events. This technique is especially applicable when orchestration service clients cache mashed up data. When the object owner service finds that data has changed, it sends out an event to an event bus or MOM. This is consumed by the orchestration service to take appropriate action.&lt;/p&gt;
&lt;h2&gt;Two more concepts on Caching&lt;/h2&gt;
&lt;h4&gt;Measurements&lt;/h4&gt;
&lt;p&gt;Anything we do, we should measure. There is a saying in Tamil&lt;/p&gt;
&lt;div class="admonition info"&gt;
&lt;p&gt;&lt;strong&gt;ஆற்றில் போட்டாலும் அளந்து போடு&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Even when you are just going to throw something into the river you should measure and throw it.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;One of the critical measurements for any caching setup is the cache hit ratio. Every one understands what a cache hit is - when a cache access succeeds. And a cache miss when you miss. So cache hit ratio is:&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p&gt;&lt;strong&gt;Cache Hit Ratio&lt;/strong&gt; = &lt;em&gt;Cache Hit&lt;/em&gt; &lt;strong&gt;/&lt;/strong&gt; (&lt;em&gt;Cache Hit&lt;/em&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;em&gt;Cache Miss&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For caching to be considered effective, the data cached must have a good cache hit ratio. If you have a low cache hit ratio then you are surely doing something wrong. Either you are using the wrong cache patterns or you are caching the wrong data. Any changes you want to do related to caching (change methods/techniques or something else) must keep the cache hit ratio in mind. Any change reducing the cache hit ratio is a bad idea.&lt;/p&gt;
&lt;h4&gt;Eviction&lt;/h4&gt;
&lt;p&gt;We talked about expiry a lot. There is another concept which people consider closely related to it - Eviction. Actually eviction is very different from Expiry. It has more connection to the &lt;em&gt;cache hit ratio&lt;/em&gt; and &lt;em&gt;what to cache&lt;/em&gt; question. Both expiry and eviction deal with removal of entries, but their causes and purposes are completely different.&lt;/p&gt;
&lt;p&gt;Cache eviction comes into play because memory is a finite resource - for the most part that is. While I would love to cache the entire database it is just not economical to do it. So once the amount we cache exceeds a number limit or memory limit, any addition of entry means some other entry needs to be removed out of memory. This process is called eviction. Eviction is generally done based on some algorithmic strategy. Different caching frameworks provide many different algorithms. The most common ones are LRU, LFU, FIFO.&lt;/p&gt;
&lt;p&gt;LRU is the most common is generally considered a reasonable default. It is considered a close proxy to the most optimal caching algorithm. The specific reason is due to Locality of reference. This is easily explained in the context of caching at the CPU level where the recently used data or instruction is repeatedly requested by the CPU. This is called Temporal Locality. The same phenomenon applies to the real world usage of cached data too. We can understand this intuitively. For example most times when data is created it is immediately accessed. Also when real users surf through data like products they tend to return to see the same products again and again. Another example is generally items like dresses or vehicles come into trend in time cycles (or may be because there is a big sale going on). Temporal locality makes sense. In my experience of using caches, I have never needed to change the eviction algorithm to something else. Nor have I heard of any real life usage of any other algorithm - that is anecdotal for sure but I am pretty convinced. &lt;/p&gt;
&lt;p&gt;Changing a caching algorithm to something else is mostly a configuration change. The more important thing is, when we make such a change, we need to measure cache hit ratios and average response times and see how they are affected.&lt;/p&gt;
&lt;h2&gt;Conclusion - Summary of Opinions&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Preferred Approach - Service Caching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I prefer to use service managed caches as an approach to caching. Given that service owns the data, as a service developer I have a much clearer understanding of how and when data changes and hence I can make decisions more easily. With this approach clients are unaware of what is happening and hence they are not affected by any changes to mode/mechanism of caching. I can keep tweaking the implementation as long as I satisfy the performance SLA. I can keep improving performance or scale without having clients to have to change anything. A service can internally use in process caching or stand alone caching to begin with and then move to an IMDG as it needs more scale. All good right!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But you sometimes need - Orchestrator/Client side caching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not really. Service level caching does not solve all scenarios. Clients sometimes want even better response times than what service level caching can provide. Network latency could be one reason. I generally don’t really think it is a great argument since once you want to scale the client you would need an out of process cache and then the network latency is back. But that is not the only reason. There are situations where client services mash up data from multiple services and do some processing on top and use it. In such cases it might be required for that service to cache the outcome of the processing to quickly serve clients. I have done the same in one of previous situations because it was needed to meet the SLA for the service - to keep real users happy. Though this approach is sometimes required, we must understand that it is a complex thing to manage. We need to build in checks which will ensure that this cache data still ties back to original data source services - potentially an event based mechasim.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Never ever Shared Caches&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of ways which I have seen caching being used is like a blackboard where some service can write something and another service can read the same. This is possible to do but I am not in favour of it. This feels very much like multiple services using the same underlying database - a global namespace. Any change cannot be done in an isolated manner and every service can touch or be touched by all changes happening on the shared cache. So beware of it. I am not saying that this cannot be done. It feels more dirty and complicated and hence can turn ugly if we are not very careful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; And not really a replacement to DB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And last piece of advice or opinion. Never treat your cache as your database even if it super reliable with great clustering features. Some IMDG vendors say that it is possible. In my experience that is not what they are good at and hence they don’t work well as good persistent stores.&lt;/p&gt;
&lt;p&gt;I am done. Share your thoughts or questions through comments below.&lt;/p&gt;</content><category term="microservices"></category><category term="caching"></category><category term="talk"></category></entry><entry><title>Nginx Serves Us like this - Maybe</title><link href="https://www.nacnez.com/nginx-working-deepdive.html" rel="alternate"></link><published>2018-03-31T00:00:00+05:30</published><updated>2018-03-31T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2018-03-31:/nginx-working-deepdive.html</id><summary type="html">&lt;p&gt;A slightly deep dive on how nginx starts up and serves client requests.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nginx is one of the projects which I always felt a pull towards, owing to it architecture. It is "event driven"!. For some time, I have heard this but I always wanted to get more deeper into it. So I did some digging on how nginx works. I read many articles (will be referred below) and pieced it together to the best of my understanding. Here is my attempt to explain how I think it works!&lt;/p&gt;
&lt;p&gt;Of course take this with generous helping of salt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don't have much knowledge on linux internals and syscalls - so whatever I describe is surely going to have faults/mistakes. I look forward to get help from others to correct it.&lt;/li&gt;
&lt;li&gt;Another reason is that I did not go through the nginx source code. I don't have expertise in C and I am too scared to peep into nginx codebase for the fear of getting completely lost.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that is out of the way let us get started.&lt;/p&gt;
&lt;h2&gt;Background - Process Roles&lt;/h2&gt;
&lt;p&gt;&lt;img alt="The Nginx Master and Workers" src="https://www.nacnez.com/images/nginx-art01.jpg" style="width: 511px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Okay. Before we get started let us get some background on the nginx processes.&lt;/p&gt;
&lt;p&gt;Nginx follows an event driven architecture and has different types of processes doing specific kinds of tasks. Let me first describe these process type and their roles. Once that is out of the way, I can get to more details on how the nginx startup and processes requests.&lt;/p&gt;
&lt;p&gt;The four different kinds of processes are:&lt;/p&gt;
&lt;h4&gt;Master&lt;/h4&gt;
&lt;p&gt;The master process is what starts up and manages the lifecycle of all nginx processes. &lt;/p&gt;
&lt;h4&gt;Worker&lt;/h4&gt;
&lt;p&gt;This is the work horse of nginx. This process is the one which does all processing for client requests. Reverse proxying, load balancing, compression, ssl termination etc. are all done by this process. Generally there could more than one of these processes running at any given time.&lt;/p&gt;
&lt;h4&gt;Cache related processes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cache loader process
This process checks the on-disk cache items and populates nginx in-memory db with cache metadata. It prepares nginx to work with files already cached and exits after updating in-memory db&lt;/li&gt;
&lt;li&gt;Cache manager process
This process manages cache expiration and invalidation. It stays in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That should be enough background. Let us deep dive into how nginx starts and processes requests. For this discussion the processes under focus are only the master and the worker processes.&lt;/p&gt;
&lt;h3&gt;See it yourselves&lt;/h3&gt;
&lt;p&gt;If you want to see these processes in action. Do the following (assuming you have done the installation):
Open a terminal/shell and execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;watch -n &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="s2"&gt;"sudo ps -eFww --forest | grep 'nginx\|PID'"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In another terminal execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can drop the &lt;code&gt;sudo&lt;/code&gt; if your nginx does not have reserved ports configured for listening.&lt;/p&gt;
&lt;p&gt;Once you start nginx, you should see the processes in the first terminal window. Keep watching it for sometime (you might notice something).&lt;/p&gt;
&lt;h2&gt;Nginx startup&lt;/h2&gt;
&lt;p&gt;You start nginx by calling &lt;code&gt;nginx&lt;/code&gt;. Let us look at what each of the main processes do at this point&lt;/p&gt;
&lt;h3&gt;The Master (A true leader/delegator)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Master startup flow" src="https://www.nacnez.com/images/nginx-MasterStartupFlow.jpg" style="width: 803px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;The first process to start is the master process. It first reads through, validates and compiles the configuration. Once the configuration is validated and compiled, it looks at the configuration to figure out what all listen sockets have to be created for serving client requests.&lt;/p&gt;
&lt;p&gt;The server connection establishment process starts at this point for the required listen sockets. As a server (role played in client server communication), the master first tries to create sockets and bind to the ports defined in the configuration. One thing to note is that if the defined ports belong to the reserved set, the nginx needs to be started as a privileged user (root/sudo). Once the socket is created and binded it will also set the socket to listen mode with a default backlog of 511 (read more about listen backlog from references).&lt;/p&gt;
&lt;p&gt;The next step the nginx master does is to start the worker processes. This is typically done by forking (&lt;code&gt;clone&lt;/code&gt;) them out as a child process (this is my assumption/understanding). This also means that listen sockets descriptors are copied over to the child processes and are hence accessible to the workers. The compiled configuration is also passed onto the them. The number of worker processes to be created is based on configuration. The typical default is &lt;code&gt;auto&lt;/code&gt; which leads to the creation as many workers as there are cores in the machine (or VM).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Syscalls made by master at startup" src="https://www.nacnez.com/images/nginx-MasterAtStart.png" style="width: 912px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h3&gt;The Worker (I am awake!)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Worker startup" src="https://www.nacnez.com/images/nginx-WorkerAtStartPic.jpg" style="width: 805px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Each worker creates a epoll data structure with the kernel (using &lt;code&gt;epoll_create&lt;/code&gt;). It then registers the listen socket descriptor to it using &lt;code&gt;epoll_ctl&lt;/code&gt; and asks the kernel to let it know if there are any events (read or write) on the listen socket(s). All the different workers have access to the listen socket and they concurrently share the requests coming to them. Eventually if the worker has no other work to do it would block using &lt;code&gt;epoll_wait&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each of the workers also create non-blocking connection sockets to upstream servers so that they can act as proxies to them. This also is event based and hence based on epoll.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Syscalls made by worker at startup" src="https://www.nacnez.com/images/nginx-WorkerAtStart.png" style="width: 912px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h2&gt;Nginx processing requests&lt;/h2&gt;
&lt;p&gt;Now that nginx has started, it is time to process requests.&lt;/p&gt;
&lt;h3&gt;The Master (time to sleep)&lt;/h3&gt;
&lt;p&gt;At this point the master pretty much does nothing. It does not have any work to do during the time of processing requests.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Syscalls made by master on getting load/user requests" src="https://www.nacnez.com/images/nginx-MasterOnLoad.png" style="width: 912px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h3&gt;The Worker (A superstar)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Worker at work" src="https://www.nacnez.com/images/nginx-WorkerAtWork.jpg" style="width: 816px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;When a new client connection request comes to the listen socket, the linux kernel will pick the latest added worker process among epoll those waiting in the listen queue and send an event.&lt;/p&gt;
&lt;p&gt;This worker process would then do a non-blocking &lt;code&gt;accept&lt;/code&gt; call which will create a connection socket between the client and server. This connection is now going to be served by this worker process. The worker does the same thing with the connection socket as it did with the listen socket. It registers interest on IO events happening on that socket through epoll_ctl and waits for events with &lt;code&gt;epoll_wait&lt;/code&gt; if it has no other work to do.&lt;/p&gt;
&lt;p&gt;Over a period of time you will find that a worker process ends up serving many connections at the same time. Each of these connections are registered within their (worker's) own epoll data structure. At the end of epoll_wait, the worker might get multiple sockets which are ready for processing. It then processes each of those requests. Processing of incoming request might include acting as a reverse proxy (write out the request to upstream server), do ssl termination etc. On the other hand processing of the response could be compressing the response read from the up stream server (again this is event based using epoll), and write out the response to the client again in non-blocking fashion. The worker is the one which exhibits all the wonderful features of nginx.&lt;/p&gt;
&lt;p&gt;The worker processes do not use epoll based asynchronous IO for files. For files it does blocking IO in most cases. If AIO is well supported in a platform it might use the same. But generally file IO slowness can lead to blocking behavior in the worker (and hence nginx).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Syscalls made by worker on load" src="https://www.nacnez.com/images/nginx-WorkerOnLoad.png" style="width: 912px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h4&gt;See the worker in action&lt;/h4&gt;
&lt;p&gt;Do you want to see the workers in action? Go ahead and watch the connections using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;watch -n &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="s2"&gt;"sudo netstat -npt  | grep :80"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that watch running go ahead and hit your nginx server using &lt;code&gt;ab&lt;/code&gt; or something similar. You should see the connections swelling up. Of course I have assumed here that the port nginx is listening to is 80. Change it according to your setup.&lt;/p&gt;
&lt;h2&gt;What is all this fuss about!&lt;/h2&gt;
&lt;p&gt;Nginx does all this to provide high scalability.&lt;/p&gt;
&lt;h3&gt;The worker's power&lt;/h3&gt;
&lt;p&gt;A nginx worker can process 1000s of connections at the same time because of its non-blocking event based nature. Because of this nature, the cost per new connection in nginx is a matter of space for a new file descriptor and data structures needed to manage that socket's information. This is unlike other servers which have a process driven architecture (apache) which needs to allocate much more memory due to creation of process (stack and heap).&lt;/p&gt;
&lt;p&gt;Also the creation of limited number of worker processes in nginx means they can remain pinned to the cpu cores and avoid excessive context switching.&lt;/p&gt;
&lt;h3&gt;But then it is not all roses&lt;/h3&gt;
&lt;p&gt;Earlier I mentioned that the linux kernel keeps picking up the latest added process to distribute connection requests coming into the listen sockets, it happens that one of the workers get the lion share of the work load and hence the multi-core usage becomes skewed - more on one process. You will find more information in one of the articles in the references section.&lt;/p&gt;
&lt;h3&gt;The master strikes back.&lt;/h3&gt;
&lt;p&gt;From the above it looks like the &lt;em&gt;worker&lt;/em&gt; is the only star and master is just sleeping. But the sleeping giant plays an important role in keeping nginx running when reloading configuration changes or even doing a nginx binary upgrade. You can find out more about this in the articles in references.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As I said earlier, what I have tried here is to give an overview of how nginx goes about serving its clients at a slightly more detail level. I have used the following references as a way to understand most of this. And of course I might have got some of the connecting pieces wrong. If anybody can find these gaps please chime in. Thanks for being here!&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/"&gt;Inside NGINX: How We Designed for Performance &amp;amp; Scale&lt;/a&gt; - Gives a good idea on Nginx architecture. Also covers how the master is able to handle config changes or binary upgrades without downtime.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netguru.co/codestories/nginx-tutorial-basics-concepts"&gt;Nginx Tutorial #1: Basic Concepts&lt;/a&gt; - Just basic idea on running nginx and some basic configuration&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.aosabook.org/en/nginx.html"&gt;nginx&lt;/a&gt; - A deep dive on nginx architecture by one of nginx architects&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/blog/tuning-nginx/"&gt;Tuning NGINX for Performance&lt;/a&gt; - Gives you ideas for improving nginx performance&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/developerworks/aix/library/au-tcpsystemcalls/index.html"&gt;Know your TCP system call sequences&lt;/a&gt; - A general article covering system calls related to TCP connection creation and management. Covers listen backlog too.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/"&gt;Why does one NGINX worker take all the load?&lt;/a&gt; - This article talks about how it happens that one nginx worker ends up getting a lot more load than others and what you can potentially do about it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@copyconstruct/the-method-to-epolls-madness-d9d2d6378642"&gt;The method to epoll’s madness&lt;/a&gt; - A good article on how epoll works.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.nginx.org/read.php?2,194884,194884"&gt;Does Nginx block on file IO?&lt;/a&gt; - A discussion thread on how nginx file reading works.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sysdig.com/"&gt;Sysdig&lt;/a&gt; - This is what I used for determining those sys calls that were happening on each of the processes under different conditions.&lt;/li&gt;
&lt;/ol&gt;</content><category term="web server"></category><category term="reverse proxy"></category><category term="load balancer"></category><category term="system calls"></category><category term="processes"></category><category term="nginx"></category><category term="architecture"></category></entry><entry><title>Thou shall listen to Podcasts - Part II</title><link href="https://www.nacnez.com/thou-shall-listen-to-podcasts-part-2.html" rel="alternate"></link><published>2015-05-04T00:00:00+05:30</published><updated>2015-05-04T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2015-05-04:/thou-shall-listen-to-podcasts-part-2.html</id><summary type="html">&lt;p&gt;I would like to share the podcasts I listen to - part 2.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok. I did say that I will bring the next installment quickly (you can find the &lt;a href="https://www.nacnez.com/thou-shall-listen-to-podcasts-part-1.html"&gt;previous one here&lt;/a&gt;) But my life and me got in the way. But, better late than never.&lt;/p&gt;
&lt;h3&gt;Podcasts Set 2 - The Software Developer's Topper List&lt;/h3&gt;
&lt;p&gt;This set of podcasts are focused on software development, open source software and technology related. I listen to a good number of such shows and in this installment I am going to share my top three picks. Hopefully I will follow up with more!&lt;/p&gt;
&lt;h4&gt;Software Engineering Radio&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Software Engineering Radio Logo" src="http://www.se-radio.net/wp-content/uploads/2014/10/se-radio-logo.png" style="float:right; width:40%"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.se-radio.net/"&gt;Software Engineering Radio&lt;/a&gt;, as the name suggests, is focused on Software engineering. I would say it is a must listen for professional developers. The topics covered vary from software engineering related topics - agile, continuous delivery, architecture related and open source frameworks. The discussion is very technical in nature (some of the most technical discussions I have heard on a podcast) but it still tries to give the listener a good overview of the subject. The discussions are reasonably long (around 45 - 60 minutes), so there is time to explore the topic to some extent. The guests are mostly leaders in the field and/or head honchos of the open source projects that is being discussed. The hosts are a team of developers themselves (some of them very renowned in their own right) and help the steer the discussion so that it is developer focused.&lt;/p&gt;
&lt;p&gt;Some of the recent topics I have listened to are Apache Storm, Continuous Delivery, Logging infrastructure, CQRS, Kafka etc. Recently these shows have become more frequent as well (hope it stays that way). If you are a developer and want to try podcast listening, this one is something you would want to start with.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://feeds.feedburner.com/se-radio"&gt;&lt;img alt="rss feed link of SE Radio" src="https://www.nacnez.com/images/rss-icon.gif" style="width: 48px; height: auto; max-width: 100%;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h4&gt;The Cloudcast&lt;/h4&gt;
&lt;p&gt;&lt;img alt="The Cloudcast Logo" src="http://1.bp.blogspot.com/-xtXs8yJ2Ll0/VNopnCEwhDI/AAAAAAAABWM/w_ZHJlzFZlQ/s1600/Cloudcast-Logo-2015-Banner-Blue.png" style="float:right; width:40%"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thecloudcast.net/"&gt;The Cloudcast&lt;/a&gt; started as a cloud technologies podcast. At that time, lots of coverage used to be on Cloud platform vendors and products out there. But close to an year back, they have started focusing a lot on open source projects on cloud and distributed computing  and devops related topics. These podcasts are generally short and to the point. The hosts try not get into a lot of depth but try to get the guests to provide high level but useful information and more importantly trends. Recently they have added byte sized versions of the podcast which provide very short introductions of dev and devops topics. You might find those specific ones either useful or trivial.&lt;/p&gt;
&lt;p&gt;I primarily find the podcast discussions providing me a lot of breadth of knowledge in the space. The hosts are really good too. Brian is very sharp and to the point. Aaron on the other hand brings more fun and cheer. Overall a very good podcast to listen to for the topics they cover.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.buzzsprout.com/3195.rss"&gt;&lt;img alt="rss feed link of The Cloudcast" src="https://www.nacnez.com/images/rss-icon.gif" style="width: 48px; height: auto; max-width: 100%;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h4&gt;Floss Weekly&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Floss Weekly Logo" src="http://twit.tv/files/imagecache/coverart-feed/coverart/floss1400.jpg" style="float:right; width:30%"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://twit.tv/show/floss-weekly"&gt;Floss Weekly&lt;/a&gt; is a podcast focused on free and open source software. This is one of the oldest shows in the podcasting planet. The nature of projects could vary a lot in this podcast. I have discovered a &lt;a href="http://synergy-project.org/"&gt;desktop software for controlling multiple computers using a single keyboard and mouse&lt;/a&gt; to a &lt;a href="https://github.com/ushahidi/Ushahidi_Web"&gt;platform which made Kenyan elections better&lt;/a&gt; through this podcast. It is this variety which draws me to it. The primary criteria of projects participating in it is about them being open source.&lt;/p&gt;
&lt;p&gt;The hosts don't get as technical as the other two shows (except for Randal at times), but the show provides a well rounded overview of the project. There is considerable discussion on open source licensing and governance which I don't find in other shows. And that is something I like to get exposed to. So if you are into open source in general and like variety, this is a good podcast to listen to.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://feeds.twit.tv/floss.xml"&gt;&lt;img alt="rss feed link of Floss Weekly" src="https://www.nacnez.com/images/rss-icon.gif" style="width: 48px; height: auto; max-width: 100%;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Done! This is a short one. The top three are out, but there is more to come. I will get them out sooner than later.&lt;/p&gt;</content><category term="podcasts"></category><category term="technology"></category></entry><entry><title>Thou shall listen to Podcasts - Part I</title><link href="https://www.nacnez.com/thou-shall-listen-to-podcasts-part-1.html" rel="alternate"></link><published>2015-01-31T00:00:00+05:30</published><updated>2015-01-31T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2015-01-31:/thou-shall-listen-to-podcasts-part-1.html</id><summary type="html">&lt;p&gt;I would like to share the podcasts I listen to.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I listen to a lot of podcasts. I really can't remember how it started but getting my smart phone (about 4 years back) is what triggered it. I have listened to a lot of them and found them useful, entertaining, informative and fun. Some of these podcasters even feel like long time friends. Ok, that might be pushing it, but at times I do feel a sort of allegiance and loyalty to them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Podcasts" src="https://www.nacnez.com/images/podcast.jpg" style="width: 679px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h3&gt;Why Podcasts?&lt;/h3&gt;
&lt;p&gt;Objectively, I feel podcasts can act as a good source of information/knowledge which can consumed in a passive manner. I listen to podcasts mostly when I am commuting or exercising (walking!). There are podcasts for almost every topic you can think of. I am primarily focused on technology, software development and startup related podcasts but I know there are a lot more available. While there are podcasts directories which you can use to locate podcasts, I find my podcasts from podcatchers, itunes and from other podcasts (and of course do googling for getting the rss feed link). Most of the podcasts I listen to are produced in the US (wish I could find more from India!!!). That said, they provide a lot of value from my perspective.&lt;/p&gt;
&lt;h3&gt;Share the goodness&lt;/h3&gt;
&lt;p&gt;Since I find it so useful, I thought it would be good to share them with others. I initially thought of just creating a list of all of them and throw it out there. But somehow I felt that was too vanilla. Then I thought of creating a top 10 list but that felt cheesy initially. When I thought more about it and I felt it might be useful for figuring out my own preferences and likings and my ability to judge things. So I attempted to make an objective score for some of the really good podcasts (as per my taste) which I listen to. Only to realize that it is damn difficult to make it objective. So I gave up on that. Finally decided to create a set of subjective groups of podcasts I listen to and share them with you all.&lt;/p&gt;
&lt;h3&gt;Podcasts Set 1 - Distinctive and Fresh&lt;/h3&gt;
&lt;p&gt;I am starting this series with a set of podcasts which I feel have a very distinctive nature. The content they provide (most times) is perceptive and opens your mind to a lot of different thoughts and ideas. Listening to them makes you think, smile and sometimes be amazed. Let us get on with it.&lt;/p&gt;
&lt;h4&gt;Spark&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Nora Young who anchors Spark" src="https://www.nacnez.com/images/podcast/nora_young.jpg" style="float:rightwidth: 240px; height: auto; max-width: 100%;"/&gt;
&lt;a href="http://www.cbc.ca/radio/spark"&gt;Spark&lt;/a&gt;, in Nora's words, is a podcast about tech trends and fresh ideas. And I couldn't describe it any better. Nora is the anchor of the show. The podcast is set as a conversation with the listener. Nora makes the listener a part of the journey in which she meets remarkable people and has very deliberate and pleasant conversation with them. These people look at tech in different ways - either to solve problems or just to understand different things. The podcast brings innovative stories on tech trends and how technology affects people and culture. It brings up simple life hacks and cool new ideas. And it is really produced well (it is &lt;a href="http://en.wikipedia.org/wiki/Spark_(radio_show)"&gt;a radio show by CBC&lt;/a&gt;). The show is done regularly. The music is done well and it connects the various parts of the show nicely. There is a scent of art and creation in the podcast which appeals to creative spirit in us developers (at least I would like to think that :)). It leaves you with an enriched and fresh feeling most of the times.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cbc.ca/podcasting/includes/spark.xml"&gt;&lt;img alt="rss feed link of Spark" src="https://www.nacnez.com/images/rss-icon.gif" style="width: 48px; height: auto; max-width: 100%;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Hanselminutes&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Scott Hanselman who produces hanselminutes" src="https://www.nacnez.com/images/podcast/hansel.jpeg" style="float:rightwidth: 299px; height: auto; max-width: 100%;"/&gt;
&lt;a href="http://hanselminutes.com/"&gt;Hanselminutes&lt;/a&gt; is a podcast produced by Scott Hanselman. This podcast historically was a .NET developer podcast. But for quite a long time (at least from the time I have been listening), it has not had that focus at all. There are some shows related to .NET for sure. At the same time there are shows on Python, Javascript, Dart, Java etc. as well. Actually forget the programming languages. This guy produces shows on UX, game development, startups, relationships, developer culture, diabetes technologies, iphones etc. Almost anything under the sun - the difference is that he looks at it from an eye of a developer and problem solver. Also, he always will try to NOT make any assumptions on what the listener might know about the topic. He will get the guest to explain the topic without the listener getting lost on jargon speak. The discussion is never long, but whatever is talked would make sense to you and that nugget is something you can carry with you. The way he goes about the discussion is engaging and simple. He does not try to be funny or anything. Just genuine good conversation. The wide variety of topics which he covers makes it very appealing to me. And he is very very regular. So you can expect some interesting conversation every week. Though I have never met him personally, the show sort of makes me feel that I know him somewhat. And he is an open source supporter too!!!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://feeds.podtrac.com/9dPm65vdpLL1"&gt;&lt;img alt="rss feed link of Hanselminutes" src="https://www.nacnez.com/images/rss-icon.gif" style="width: 48px; height: auto; max-width: 100%;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Cognicast&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Cognicast latest episode cover art" src="https://www.nacnez.com/images/podcast/cognicast.jpeg" style="float:rightwidth: 300px; height: auto; max-width: 100%;"/&gt;
&lt;a href="http://blog.cognitect.com/cognicast/"&gt;Cognicast&lt;/a&gt; is a podcast produced by Cognitect and is hosted by Craig Andera. This is relatively new podcast and leans towards Clojure related topics (since Cognitect is Clojure focused - Rich Hickey is the CTO for crying out loud!). Now I am not a Clojure guy at all but I like the functional leanings of the topics. That said, this podcast is also modeled in the lines of hanselminutes. Apart from technical topics, it covers other kinds of topics as well. Craig keeps the conversation nice and cordial. One of the great things he does is that he allows the guest to flow with what they want to talk and get the maximum out of them. He might nudge them a little here and there but allows them to take the limelight almost completely. Very nice and humble all the time. Some of the discussions I have heard have truly blown my mind. That is why even when there are many clojure heavy discussions on the show, I still listen to them since I get at least something out of it. Another novel part of the show is that allows you to sample lots of different music. The show is young but I find it enjoyable, thought provoking and fresh. I hope Craig keeps going that way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update on 3-May-2015&lt;/em&gt;&lt;/strong&gt;: The music sampling part of the show got stopped from this year (2015) onwards.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://feeds.feedburner.com/cognicast"&gt;&lt;img alt="rss feed link of Cognicast" src="https://www.nacnez.com/images/rss-icon.gif" style="width: 48px; height: auto; max-width: 100%;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That is the first batch out. I will push the next installment very soon!!! Catch you all later.&lt;/p&gt;</content><category term="podcasts"></category><category term="technology"></category></entry><entry><title>Journey starts at the Box</title><link href="https://www.nacnez.com/my-journey-starts-at-the-box.html" rel="alternate"></link><published>2014-12-21T00:00:00+05:30</published><updated>2014-12-21T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2014-12-21:/my-journey-starts-at-the-box.html</id><summary type="html">&lt;p&gt;My charting journey starts me on the box plot and d3.js&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been spending some of my free time on working on a personal project. As part of that, I needed to figure out how can we show visualizations of my data - yep charting. To give you some background, I am playing with angular js for this application and using a python based backend. Since I wanted to have a dynamic visualization - with animations and interactions thrown around, I decided to use a client side charting library that takes in the data and does the visualization entirely on the browser. Another thing I wanted to do was to see if I could use the same code or parts of it for delivering visualizations to the mobile.&lt;/p&gt;
&lt;h3&gt;D3 Enters&lt;/h3&gt;
&lt;p&gt;Given its immense popularity and its ability to work with svg based visualization (which I felt would work better for supporting multiple devices - of course that may not be true), I gravitated to &lt;a href="http://d3js.org/"&gt;D3&lt;/a&gt;. I got to the D3 site and I found so many cool looking visualizations that I was just blown away (I bet you will have the same feeling). Of course almost none of them made much sense to me. I wanted to use some simple visualizations like bar charts, line charts etc. and they were of course available on D3.&lt;/p&gt;
&lt;h3&gt;But I am building an Angular app.&lt;/h3&gt;
&lt;p&gt;Also I was lazy. I wanted to figure out if there is a pain less way to get these charts integrated into my angular app. The immediate thought was to figure out if there are any angular directives.&lt;/p&gt;
&lt;h4&gt;Angular Directives and NVD3 to the rescue&lt;/h4&gt;
&lt;p&gt;So I googled it. And lo and behold there was &lt;a href="https://www.dashingd3js.com/d3-resources/d3-and-angular"&gt;an entire page&lt;/a&gt; talking about it. After some digging around I settled on two of them - &lt;a href="http://krispo.github.io/angular-nvd3/#/"&gt;angular-nvd3&lt;/a&gt; and &lt;a href="http://cmaurer.github.io/angularjs-nvd3-directives"&gt;angularjs-nvd3-directives&lt;/a&gt;. Both of these directive libraries leverage &lt;a href="http://nvd3.org/index.html"&gt;nvd3&lt;/a&gt; underneath which itself was built on d3 (Wow! A layer above a layer above the actual thing). While both of them seemed promising to me, I somehow settled on the second one. I remember my reasons at that time were that I liked the declarative nature of the directive (I am not sure if I like that still) and that it was around for longer time (which I still think is sensible).&lt;/p&gt;
&lt;p&gt;&lt;img alt="nvd3 based bar chart" src="https://www.nacnez.com/images/box-journey-bar.png" style="width: 972px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;That was a simple bar chart (look at the various bar colors!!!) and I followed that with a simple line chart&lt;/p&gt;
&lt;p&gt;&lt;img alt="nvd3 based line chart" src="https://www.nacnez.com/images/box-journey-line.png" style="width: 972px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;So my immediate needs were taken care and everything was perfect. I cooked up some bar charts, line chart and even some pie charts. I tweaked some colors and axis layout through the directive provided support. All was going well. Of course, in all the tweaking I was doing (colors, date formats), I sometimes needed to get some insight into d3.js itself. But that was very minimal.&lt;/p&gt;
&lt;h3&gt;Things change, We want more&lt;/h3&gt;
&lt;p&gt;I had taken a short detour into the &lt;a href="https://www.coursera.org/course/stats1"&gt;world of statistics&lt;/a&gt; earlier. So I always liked the concepts of median and percentiles. So I wanted to figure out if there is a way to depict that in a visualization. My friend then introduced me to the &lt;a href="http://en.wikipedia.org/wiki/Box_plot"&gt;box plot&lt;/a&gt;. I won't go into the details of box plot here. There is good reference material on that on the internet.&lt;/p&gt;
&lt;p&gt;So my mind was set on the box plot and I wanted to figure out how I can create a visualization for it. The angularjs-nvd3-directives did not have any support for them. Neither did nvd3. So I looked directly at d3 and there was &lt;a href="http://bl.ocks.org/mbostock/4061502"&gt;an example&lt;/a&gt; and the associated &lt;a href="https://github.com/d3/d3-plugins/tree/master/box"&gt;plug-in code&lt;/a&gt; available for it.&lt;/p&gt;
&lt;p&gt;My idea of living on top of the abstraction (actually an abstraction over abstraction) no longer worked. I had no choice.&lt;/p&gt;
&lt;h3&gt;Getting my feet wet into D3&lt;/h3&gt;
&lt;p&gt;I initially thought I would try to create a nvd3 based box plot but I realized that it is going to take a lot of time figuring out nvd3 when I did not even know much about d3.&lt;/p&gt;
&lt;p&gt;So I tried to figure out some basic concepts of d3 so that I understand the plug-in code. First and foremost I understood the concept of selection and mapping the selection with data. Also got an understanding of scales. This helped me understand the plug-in code. But that was not enough. I needed to figure out how I can integrate d3 with my angular app. Again there was example readily &lt;a href="http://bl.ocks.org/biovisualize/5372077"&gt;available&lt;/a&gt;. A simple directive would do the trick and I created a box plot using the same.&lt;/p&gt;
&lt;h3&gt;Tweaking the box plot&lt;/h3&gt;
&lt;p&gt;I started getting interested in the box plot code itself. First thing I realized was that the box plot code in its current form (inside the plug-in) took a lot of horizontal space as you increase the number of plots. This may not work very well when you don't have a lot horizontal space (read mobile device). So I figured I needed to tweak the box plot to support a change in orientation.&lt;/p&gt;
&lt;p&gt;The second thing I wanted to do was to figure out a way to show labels close to my plots to indicate what they are plotting.&lt;/p&gt;
&lt;p&gt;Another thing I noticed was that the outliers plotted by the box plot could skew up your graph quite a lot if you have really high outlier values. So I felt it would be good to have a way to turn it off. That is another thing I wanted to tweak.&lt;/p&gt;
&lt;p&gt;And that is what I did. You can find &lt;a href="http://embed.plnkr.co/7RVMhw/"&gt;my code in plunker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="box plot visual from plnkr" src="https://www.nacnez.com/images/box-journey-plnkr-box.png" style="width: 645px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h3&gt;The Road forward&lt;/h3&gt;
&lt;p&gt;The plnkr code is still not the cleanest. I have done some ugly hacks to make it look reasonable. It is available publicly. If anybody wants to tweak it and make it better (and teach me in the process), that would be fantastic. Also, I have still not been able to make my changed box plot work with my angular directive reliably. That is something I would surely like to fix. If I do I will share that code.&lt;/p&gt;
&lt;p&gt;On the library side, I want to figure out if I can find a better abstraction over d3 which is simple to use. d3 is good but it is very literal and low level in its nature (which is by design from what I understand and hence gives it a lot of power to do new things!). I don't know whether nvd3 is that abstraction. May be it is and I will find out more about it. There seem to be other &lt;a href="http://trifacta.github.io/vega/"&gt;alternatives&lt;/a&gt; as well. Also for the mobile, I am not sure whether the d3 way would be the best fit - I somehow do not feel so (anybody can correct me!!!).&lt;/p&gt;
&lt;p&gt;Libraries aside, I feel visualization is a field to really get a good handle on. To use a cliche - A picture is 1000 times better than words (or was it a picture is better than 1000 words... either way) - good visualization can be very powerful. I think a more deeper study on visualization will be very useful to me. Hopefully I can go down that path and do something worthwhile!&lt;/p&gt;</content><category term="charting"></category><category term="visualization"></category><category term="box plots"></category><category term="d3.js"></category><category term="angular.js"></category></entry><entry><title>Python can be weird!</title><link href="https://www.nacnez.com/python-can-be-weird.html" rel="alternate"></link><published>2014-11-16T00:00:00+05:30</published><updated>2014-11-16T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2014-11-16:/python-can-be-weird.html</id><summary type="html">&lt;p&gt;Python can be weird at times!&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a long time, I have been focused on &lt;em&gt;Java&lt;/em&gt; as my primary development language (and platform) for both my work and any of my small personal projects. But I have been playing with &lt;em&gt;Python&lt;/em&gt; for more than 6 months now. The reason I picked Python, is a discussion for another day. Currently I want to focus on couple of things which I found to be weird with Python.&lt;/p&gt;
&lt;p&gt;Before I get into that, let me make myself clear. My relationship with Python is very young and my perspective comes from a long time Java exposure and a limited exposure to other languages (read &lt;em&gt;Javascript&lt;/em&gt; and very very little bit of &lt;em&gt;Haskell&lt;/em&gt;). Also, within this short time with Python, I find the language as a breath of fresh air. I find it to be much more concise than what I am used to (think &lt;em&gt;Java&lt;/em&gt;). It is really powerful. I am getting a taste of it's dynamic nature as well. These qualities of Python are well known to all and I will probably write about my impressions on specific features sometime down the line. But today I wanted to focus on couple of specific language features I found to be slightly weird in their working.&lt;/p&gt;
&lt;h3&gt;Augmented Assignment&lt;/h3&gt;
&lt;p&gt;The term might sound a bit fancy (that is what I felt when I read it), but the construct is pretty simple and probably known to all programmers (of almost any language).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must have spotted the augmented assignment operator! Yep, it is &lt;code&gt;+=&lt;/code&gt; . Of course there are other similar ones like &lt;code&gt;-=&lt;/code&gt; , &lt;code&gt;*=&lt;/code&gt;  etc. The form &lt;code&gt;a += 1&lt;/code&gt; is generally a shortcut of &lt;code&gt;a = a + 1&lt;/code&gt; . In Python also it works the same way. At least that is what I thought.&lt;/p&gt;
&lt;p&gt;Let us try using the augmented assignment operator with list concatenation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That works as expected. So I should be able to reliably use the augmented assignment operator instead of the longer form. Let us try something else now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;     &lt;span class="c1"&gt;# Why am I doing this? Wait for it.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This makes sense to me. The concatenation operator &lt;code&gt;+&lt;/code&gt;  creates a new object and assigns to A. And 'C' keeps pointing to the older object. This is all good and working as expected. Let us change the above using the augmented assignment operator instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;  &lt;span class="c1"&gt;# Here I have used the augmented assignment version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;????####!!!!. What happened here? Something happened. How did it change? What did I change? The only change I made from the previous listing is that I used augmented assignment. But that changed how things work. Concatenation no longer creates a new object. It mutates the assigned object in place!!!!&lt;/p&gt;
&lt;p&gt;That is weird to me! I figured that it is Python trying to optimize since the list is a mutable object in Python. But somehow it feels unclean, because it seems to break a promise. To a long term Python programmer, this may not be weird at all. But to me, it felt out of character to how generally Python works - predictable and explicit. It might just be my own (mis)interpretation, but it feels weird.&lt;/p&gt;
&lt;h3&gt;Boolean Operations&lt;/h3&gt;
&lt;p&gt;I am referring to the &lt;code&gt;and&lt;/code&gt;  and &lt;code&gt;or&lt;/code&gt;  operators. In Python they mean exactly what they say. The &lt;code&gt;and&lt;/code&gt;  refers to &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (conjunction) in other languages like Java and &lt;code&gt;or&lt;/code&gt;  refers to &lt;code&gt;||&lt;/code&gt; (disjunction) in other languages. In most other languages, using these operators leads to boolean results. By not in Python! These operators return one of the objects which is an outcome of the corresponding expression. One of the underlying principles behind this is Python's concept of truth values. Let me illustrate this with some examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s2"&gt;"subtract"&lt;/span&gt;
&lt;span class="s1"&gt;'subtract'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"add"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;"subtract"&lt;/span&gt;
&lt;span class="s1"&gt;'add'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In all these examples, you see that &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; are not returning any booleans. They work based on truth value concepts of Python and return the objects involved as per the truth value rules. Let us see its usage below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;principal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tenure&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;principal&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;principal&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tenure&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tenure&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Returning interest for &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; at &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; percent for &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; years"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Returning&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="mf"&gt;150.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Returning&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="mf"&gt;500.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Returning&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="mf"&gt;400.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Returning&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="mf"&gt;400.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above example is a convoluted and contrived way to handle default values (since Python has function argument defaults). But to somebody reading through that code, it still makes reasonable sense. Now let me change it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;principal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tenure&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;principal&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tenure&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Returning interest for &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; at &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; percent for &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; years"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Returning&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="mf"&gt;150.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Returning&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="mf"&gt;500.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Returning&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="mf"&gt;400.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc_simple_interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Returning&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;
&lt;span class="mf"&gt;400.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that is Python's &lt;code&gt;or&lt;/code&gt; operator working its way to give us the exact same behavior as the &lt;em&gt;'ternary if'&lt;/em&gt; used before.&lt;/p&gt;
&lt;p&gt;The way the logical operators work in Python felt weird to me. But I did not feel very unclean about it like the last one. It just was different.&lt;/p&gt;
&lt;h3&gt;In Closing&lt;/h3&gt;
&lt;p&gt;These are two cases where I felt Python to be slightly weird in its ways. There might be others and may be I will find them down the line (and I will share them if I do).&lt;/p&gt;
&lt;p&gt;Though I have highlighted what I felt weird about Python, it does not mean that I don't like the language. On the contrary, I actually like it quite a lot. But just like anything/anybody who you like/love a lot has some small imperfections, so does Python. In fact, it is those imperfections which make them unique and differentiated to us. That is what this does to Python too.&lt;/p&gt;</content><category term="development"></category><category term="programming languages"></category><category term="python"></category></entry><entry><title>Bye! Google Sites, Hello! Github pages</title><link href="https://www.nacnez.com/move-to-github-pages-and-pelican.html" rel="alternate"></link><published>2014-11-04T00:00:00+05:30</published><updated>2014-11-04T00:00:00+05:30</updated><author><name>Srinivas Narayanan</name></author><id>tag:www.nacnez.com,2014-11-04:/move-to-github-pages-and-pelican.html</id><summary type="html">&lt;p&gt;I moved from Google sites to Github pages for my blog and am using pelican for it&lt;/p&gt;</summary><content type="html">&lt;p&gt;For close to 2 years (the time since I got the domain), I had married myself to &lt;a href="http://en.wikipedia.org/wiki/Google_Sites"&gt;Google sites&lt;/a&gt; for my own blog and site. It was not a happy marriage. While it might have worked for others, the inherent inability to change anything or use any of the good tools out there, for my content creation did not give me any comfort. I tried hard to use what is provided and finally gave up. I decided that, may be having my own site is really not worth it.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://pages.github.com"&gt;Github Pages&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For sometime, I have been hearing about &lt;a href="https://pages.github.com"&gt;Github pages&lt;/a&gt;, but never thought too much about it. Then I got chatting with &lt;a href="http://www.undefinednull.com"&gt;one of my friends&lt;/a&gt; and he talked about using Github pages with &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt; as the content management system for his blog. This really piqued my interest and I decided that I would give it a go.&lt;/p&gt;
&lt;p&gt;So I went through the documentation of &lt;a href="https://pages.github.com"&gt;&lt;em&gt;github pages&lt;/em&gt;&lt;/a&gt; and figured out how to create a user site and put a place holder page in it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My placeholder page" src="https://www.nacnez.com/images/placeholder_page.png" style="width: 995px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;It was not great but it was a start. I used &lt;a href="http://getbootstrap.com"&gt;bootstrap&lt;/a&gt; for the css and used some basic elements on the page.&lt;/p&gt;
&lt;p&gt;I also made my domain point to it. It took a day (may be two) for the dns records to get updated and viola! my new site was up. I had finally broken the shackles and escaped from the tyranny of Google sites. My new journey had begun.&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Now my friend had talked about using &lt;a href="http://octopress.org"&gt;octopress&lt;/a&gt; for his blog. I felt that using a static file based content management system was surely a good idea but I wanted to use a python based one instead of a ruby one. A quick search lead me to &lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt; seemed to fit my bill. I could use &lt;a href="http://daringfireball.net/projects/markdown/"&gt;markdown&lt;/a&gt; (which was another thing I meant to learn) to get my content. Pelican &lt;a href="http://docs.getpelican.com/en/3.4.0/"&gt;documentation&lt;/a&gt; looked pretty good and it was easy to get started. There was a good amount of configurability in Pelican. Also there was support for themes and plugins (which is python based and that looks interesting to me). The available collection of ready made themes seemed reasonable and I picked the bootstrap 3 based one called &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; from &lt;a href="http://dandydev.net/"&gt;Daan&lt;/a&gt;. This post is written on this base setup. I am still to add any plugins to the site but that can wait.&lt;/p&gt;
&lt;p&gt;I wanted to get started. And now I have!  &lt;/p&gt;</content><category term="publishing"></category><category term="github pages"></category><category term="pelican"></category><category term="bootstrap"></category></entry></feed>